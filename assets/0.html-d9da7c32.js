import{_ as n,V as s,W as a,a0 as t}from"./framework-91a010c2.js";const p={},e=t(`<h1 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h1><p>默认用途都是递增情况，如果递减，就把大于小于颠倒。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ul><li>针对目标函数，两边结果相反。一边true，一边false</li></ul><blockquote><p>二分搜索：找到这两段临界的那两个节点，故分类为寻找符合条件的<strong>最左侧</strong>的，和寻找符合条件的<strong>最右侧</strong>的这两种情况</p></blockquote><ul><li>在连续的整数区间使用 <ul><li>坐标位置或索引：数组中查找一个元素、隔板插入的空隙</li><li>一种资源或者能力：如最小或最大的花费、最大重复的子数组长度</li></ul></li></ul><h2 id="问题列表" tabindex="-1"><a class="header-anchor" href="#问题列表" aria-hidden="true">#</a> 问题列表</h2><ul><li>在排序数组中查找数字</li><li>在排序数组中查找数字第一个位置</li><li>在排序数组中查找数字插入位置（如果存在则返回位置）</li><li>在排序数组中查找数字末一个位置</li><li>在排序数组中查找数字的范围</li><li>在排序数组中查找数字的个数</li></ul><h2 id="排序数组" tabindex="-1"><a class="header-anchor" href="#排序数组" aria-hidden="true">#</a> 排序数组</h2><h3 id="_1⃣️寻找符合条件的最前的" tabindex="-1"><a class="header-anchor" href="#_1⃣️寻找符合条件的最前的" aria-hidden="true">#</a> 1⃣️寻找符合条件的最前的</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">searchFirst</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">IntPredicate</span> isValid<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      end <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h4><ol><li><code>end = mid</code>，因为是搜索最靠前的一个，所以在mid符合条件时，因为右侧的符合条件的都大于mid，mid右侧的都可以排除，只需要在[start, mid]找</li><li><code>start = mid + 1</code>，mid不符合条件，本身可以排出，且这样写结合第四条可以避免死循环</li><li><code>mid = start + (end - start) / 2</code><ul><li>这样写可以避免整数溢出</li><li>这样写是向下取整，由于在循环内部时start&lt;end，这样可以保证mid小于end，这样end=mid可以缩小区间范围，start=mid+1也可以缩小区间范围避免死循环。</li></ul></li></ol><h4 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h4><ol><li><p>排序数组、查找数字（或第一个位置）</p><p><code>int pos = searchFirst(0, nums.length - 1, (mid) -&gt; nums[mid] &gt;= target);</code></p><p><code>return nums[pos] == target ? pos : -1;</code></p></li><li><p>排序数组、查找数字（不存在则返回插入位置）</p><p>查找第一个大于等于的位置，所以直接返回pos</p><p><code>int pos = searchFirst(0, nums.length, (mid) -&gt; nums[mid] &gt;= target);</code></p><p><code>return pos;</code></p></li><li><p>在排序矩阵中查找数字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 排序矩阵：从左往右递增，下一行最小元素比上一行最大元素大</span>
<span class="token comment">// 二维坐标转换为一维坐标</span>
<span class="token comment">// x, y -&gt; x * m + y</span>
<span class="token comment">// index -&gt; x = index / m, y = index % m</span>

<span class="token keyword">boolean</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">searchFirst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">*</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> index <span class="token operator">/</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y <span class="token operator">=</span> index <span class="token operator">%</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">return</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2⃣️寻找符合条件的最后的" tabindex="-1"><a class="header-anchor" href="#_2⃣️寻找符合条件的最后的" aria-hidden="true">#</a> 2⃣️寻找符合条件的最后的</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">IntPredicate</span> isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      start <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="要求" tabindex="-1"><a class="header-anchor" href="#要求" aria-hidden="true">#</a> 要求</h4><ol><li><code>start = mid</code>，因为是搜索最靠后的一个，所以在mid符合条件时，因为左侧的符合条件的都小于mid，所以mid左侧的都可以排除，只需要在[mid, end]找</li><li><code>end = mid - 1</code>，mid不符合条件，本身可以排出，且这样写结合下一条可以避免死循环</li><li><code>mid = start + (end - start) / 2 + 1</code><ul><li>这样写是向上取整，由于在循环内部时start&lt;end，这样可以保证mid大于start，这样start=mid缩小区间范围，end=mid - 1可以也可以缩小区间范围避免死循环。</li><li>这样写可以避免整数溢出（有的时候start=0，end=Int的最大值，如果在括号内+1进行向上取整会溢出）</li></ul></li></ol><h4 id="用途-1" tabindex="-1"><a class="header-anchor" href="#用途-1" aria-hidden="true">#</a> 用途</h4><ol><li><p>排序数组中查找数字末一个位置</p><p><code>int pos = searchLast(0, nums.length - 1, (mid) -&gt; nums[mid] &lt;= target);</code></p><p><code>return nums[pos] == target ? pos : -1;</code></p></li></ol><h4 id="综合运用" tabindex="-1"><a class="header-anchor" href="#综合运用" aria-hidden="true">#</a> 综合运用</h4><ol><li><p>排序数组、查找数字范围</p><p><code>int first = searchFirst(0, nums.length - 1, (mid) -&gt; nums[mid] &gt;= target);</code></p><p><code>int last = searchLast(0, nums.length - 1, (mid) -&gt; nums[mid] &lt;= target);</code></p><p><code>return nums[first] != target ? new int[]{-1, -1} : new int[] {first, last};</code></p></li><li><p>排序数组、查找数字个数</p><p><code>int first = searchFirst(0, nums.length - 1, (mid) -&gt; nums[mid] &gt;= target);</code></p><p><code>int last = searchLast(0, nums.length - 1, (mid) -&gt; nums[mid] &lt;= targrt);</code></p><p><code>return nums[first] != target ? 0 : last - first + 1;</code></p></li></ol><h3 id="_3⃣️寻找符合条件的浮点数" tabindex="-1"><a class="header-anchor" href="#_3⃣️寻找符合条件的浮点数" aria-hidden="true">#</a> 3⃣️寻找符合条件的浮点数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// eg: double eps = 1e - 6;</span>
<span class="token keyword">int</span> <span class="token function">searchFirst</span><span class="token punctuation">(</span><span class="token keyword">double</span> start<span class="token punctuation">,</span> <span class="token keyword">double</span> end<span class="token punctuation">,</span> <span class="token keyword">double</span> eps<span class="token punctuation">,</span> <span class="token class-name">DoublePredicate</span> isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> eps <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      end <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      start <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用途-2" tabindex="-1"><a class="header-anchor" href="#用途-2" aria-hidden="true">#</a> 用途</h4><p>给定精度时，求平方根、立方根</p><h2 id="旋转数组" tabindex="-1"><a class="header-anchor" href="#旋转数组" aria-hidden="true">#</a> 旋转数组</h2><p>原数组是单调递增/减的数组，然后经过未知步数k次的轮转（即末尾k个元素放到原数组的头部）</p><p><strong>递增 - 断崖 - 递增</strong></p><p>不严格旋转排序数组，即原数组变为不严格增/减</p><h3 id="严格的旋转数组" tabindex="-1"><a class="header-anchor" href="#严格的旋转数组" aria-hidden="true">#</a> 严格的旋转数组</h3><p>直接具有两段性（可以直接的判断在左右着右）</p><h4 id="_1⃣️求最小值" tabindex="-1"><a class="header-anchor" href="#_1⃣️求最小值" aria-hidden="true">#</a> 1⃣️求最小值</h4><p>寻找最左的，比<strong>右边界</strong>小的元素（未旋转部分的最左）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">searchFirst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//lc153</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2⃣️求最大值" tabindex="-1"><a class="header-anchor" href="#_2⃣️求最大值" aria-hidden="true">#</a> 2⃣️求最大值</h4><p>寻找最右的，比<strong>左边界</strong>小的元素（旋转部分的最右）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3⃣️搜索某个值" tabindex="-1"><a class="header-anchor" href="#_3⃣️搜索某个值" aria-hidden="true">#</a> 3⃣️搜索某个值</h4><p>寻找最右的</p><ol><li>这里max相当于哨兵，可以防止越界</li><li>searchLast的时候，开头元素不会被mid取到，如果后面条件都不符合才会返回头</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类似山峰数组</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> left
  <span class="token punctuation">}</span>
  
  <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> right <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不严格的旋转数组" tabindex="-1"><a class="header-anchor" href="#不严格的旋转数组" aria-hidden="true">#</a> 不严格的旋转数组</h3><p>在最左侧和最右侧相等的时候，无法直接判断往左走还是往右走，所以需要恢复两段性</p><p>先遍历一遍<strong>消除最右侧与最左侧相同</strong>的元素，保证最右端的元素小于最左端（这样才可以判断左右）</p><h4 id="_1⃣️求最小值-1" tabindex="-1"><a class="header-anchor" href="#_1⃣️求最小值-1" aria-hidden="true">#</a> 1⃣️求最小值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 恢复两段性，保证最右端的元素小于最左端（才能判断左右）</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> n<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> end <span class="token operator">=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">searchFirst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>finalEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2⃣️求最大值-1" tabindex="-1"><a class="header-anchor" href="#_2⃣️求最大值-1" aria-hidden="true">#</a> 2⃣️求最大值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  
   <span class="token comment">// 恢复两段性，保证最右端的元素小于最左端（才能判断左右）</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3⃣️搜索某个值-1" tabindex="-1"><a class="header-anchor" href="#_3⃣️搜索某个值-1" aria-hidden="true">#</a> 3⃣️搜索某个值</h4><ol><li>这里max相当于哨兵，可以防止越界</li><li>searchLast的时候，开头元素不会被mid取到，如果后面条件都不符合才会返回头</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 恢复两段性</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">searchLast</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","0.html.vue"]]);export{r as default};
