import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,o as t}from"./app-CA3Si4S1.js";const a={};function e(o,l){return t(),p("div",null,l[0]||(l[0]=[n('<h1 id="线程和进程" tabindex="-1"><a class="header-anchor" href="#线程和进程"><span>线程和进程</span></a></h1><p>进程是资源（包括内存、打开的文件等）分配的单位，</p><p>线程是 CPU 调度的单位；</p><p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p><ul><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li></ul><p><strong>线程更能减少开销</strong>，体现在时间效率，还是空间效率比进程都要高：</p><ul><li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li><li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li><li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li><li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li></ul><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程"><span>进程</span></a></h2><p>CPU 管理多个进程：<strong>多个程序、交替执行</strong>，产生<strong>并行的错觉</strong>，实际上这是<strong>并发</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230424195053672.png" alt="image-20230424195053672"></p><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><ul><li><p>运行状态（<em>Running</em>）：该时刻进程占用 CPU；</p></li><li><p>就绪状态（<em>Ready</em>）：可运行，由于其他进程处于运行状态而暂时停止运行；</p></li><li><p>阻塞状态（<em>Blocked</em>）：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；</p><blockquote><p>请求某个事件且必须等待时，例如请求 I/O 事件；</p><p>如果有大量处于阻塞状态的进程，进程可能会占用着物理内存空间</p><p>所以，在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存。</p><p>挂起状态：<strong>描述进程没有占用实际的物理内存空间的情况</strong></p><ul><li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li><li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</li></ul></blockquote></li></ul><p>当然，进程还有另外两个基本状态：</p><ul><li>创建状态（<em>new</em>）：进程正在被创建时的状态；</li><li>结束状态（<em>Exit</em>）：进程正在从系统中消失时的状态；</li></ul><h3 id="控制结构-pcb" tabindex="-1"><a class="header-anchor" href="#控制结构-pcb"><span>控制结构 PCB</span></a></h3><p>在操作系统中，是用<strong>进程控制块</strong>（<em>process control block，PCB</em>）数据结构来描述进程的。<strong>是进程存在的唯一标识</strong>，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。</p><p>包含以下信息：</p><p><strong>进程描述信息：</strong></p><ul><li>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；</li><li>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；</li></ul><p><strong>进程控制和管理信息：</strong></p><ul><li>进程当前状态，如 new、ready、running、waiting 或 blocked 等；</li><li>进程优先级：进程抢占 CPU 时的优先级；</li></ul><p><strong>资源分配清单：</strong></p><ul><li>有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。</li></ul><p><strong>CPU 相关信息：</strong></p><ul><li>CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</li></ul><p>PCB 通过<strong>链表</strong>的方式进行组织，把具有<strong>相同状态的进程链在一起，组成各种队列</strong>。比如：</p><ul><li>将所有处于就绪状态的进程链在一起，称为<strong>就绪队列</strong>；</li><li>把所有因等待某事件而处于等待状态的进程链在一起就组成各种<strong>阻塞队列</strong>；</li><li>另外，对于运行队列在单核 CPU 系统中则只有一个运行指针了，因为单核 CPU 在某个时间，只能运行一个程序。</li></ul><p>还有索引的组织方式：将同一状态的进程组织在一个索引表中，索引表项指向相应的 PCB，不同状态对应不同的索引表。</p><p>一般会选择链表，因为可能面临进程创建，销毁等调度导致进程状态发生变化，所以链表能够更加灵活的插入和删除。</p><h3 id="控制过程" tabindex="-1"><a class="header-anchor" href="#控制过程"><span>控制过程</span></a></h3><ol><li>创建</li></ol><p>操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。</p><ul><li>申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；</li><li>为该进程分配运行时所必需的资源，比如内存资源；</li><li>将 PCB 插入到就绪队列，等待被调度运行；</li></ul><ol start="2"><li>终止</li></ol><p>有 3 种终止方式：正常结束、异常结束以及外界干预（信号 <code>kill</code> 掉）。</p><p>当子进程被终止时，其在父进程处继承的资源应当还给父进程。而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。</p><ul><li>查找需要终止的进程的 PCB；</li><li>如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程；</li><li>如果其还有子进程，则应将该进程的子进程交给 1 号进程接管；</li><li>将该进程所拥有的全部资源都归还给操作系统；</li><li>将其从 PCB 所在队列中删除；</li></ul><ol start="3"><li>阻塞</li></ol><p>需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。</p><ul><li>找到将要被阻塞进程标识号对应的 PCB；</li><li>如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行；</li><li>将该 PCB 插入到阻塞队列中去；</li></ul><ol start="4"><li>唤醒</li></ol><p>进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。</p><p>如果某进程正在等待 I/O 事件，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。</p><p>唤醒进程的过程如下：</p><ul><li>在该事件的阻塞队列中找到相应进程的 PCB；</li><li>将其从阻塞队列中移出，并置其状态为就绪状态；</li><li>把该 PCB 插入到就绪队列中，等待调度程序调度；</li></ul><p>进程的阻塞和唤醒是一对功能相反的语句，如果某个进程调用了阻塞语句，则必有一个与之对应的唤醒语句。</p><h3 id="进程上下文切换" tabindex="-1"><a class="header-anchor" href="#进程上下文切换"><span>进程上下文切换</span></a></h3><p>各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行，那么这个<strong>一个进程切换到另一个进程运行，称为进程的上下文切换</strong>（CPU 寄存器和程序计数器）。</p><p><strong>不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</strong></p><p>把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，从这个进程的 PCB 取出上下文，然后恢复到 CPU 中，这使得这个进程可以继续执行。</p><p><strong>进程上下文切换的场景：</strong></p><ul><li>为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li><li>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li><li>当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；</li><li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li><li>发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；</li></ul><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><p>线程之间可以并发运行且共享相同的地址空间</p><p>**线程是进程当中的一条执行流程。**同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。</p><p>线程的优点：</p><ul><li>一个进程中可以同时存在多个线程；</li><li>各个线程之间可以并发执行；</li><li>各个线程之间可以共享地址空间和文件等资源；</li></ul><p>线程的缺点：</p><ul><li><p>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C/C++ 语言，Java语言中的线程奔溃不会造成进程崩溃</p><blockquote><p>对 StackoverflowError 和 NullPointerException 做额外处理</p></blockquote></li></ul><p>举个例子，对于游戏的用户设计，则不应该使用多线程的方式，否则一个用户挂了，会影响其他同个进程的线程。</p><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h3><ul><li><strong>用户线程（*User Thread*）</strong>：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li><li><strong>内核线程（*Kernel Thread*）</strong>：在内核中实现的线程，是由内核管理的线程；</li><li><strong>轻量级进程（*LightWeight Process*）</strong>：在内核中来支持用户线程；</li></ul><h3 id="用户线程" tabindex="-1"><a class="header-anchor" href="#用户线程"><span>用户线程</span></a></h3><p>基于用户态的线程管理库来实现的，那么<strong>线程控制块（*Thread Control Block, TCB*）</strong> 也是在库里面来实现的，对于操作系统而言是看不到这个 TCB 的，它只能看到整个进程的 PCB。</p><p>所以，<strong>用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。</strong></p><p>用户级线程的模型，多个用户线程对应同一个内核线程</p><p><strong>优点</strong>：</p><ul><li>每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB 由用户级线程库函数来维护，可用于不支持线程技术的操作系统；</li><li>用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以速度特别快；</li></ul><p><strong>缺点</strong>：</p><ul><li>由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。</li><li>当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。</li><li>由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会比较慢；</li></ul><h3 id="内核线程" tabindex="-1"><a class="header-anchor" href="#内核线程"><span>内核线程</span></a></h3><p><strong>由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。</strong></p><p>一个用户线程对应一个内核线程</p><p><strong>优点</strong>：</p><ul><li>在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；</li><li>分配给线程，多线程的进程获得更多的 CPU 运行时间；</li></ul><p><strong>缺点</strong>：</p><ul><li>在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；</li><li>线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；</li></ul><p><strong>轻量级进程（*Light-weight process，LWP*）是内核支持的用户线程，一个进程可有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，也就是 LWP 都是由一个内核线程支持，而且 LWP 是由内核管理并像普通进程一样被调度</strong>。</p><p>在大多数系统中，<strong>LWP与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息</strong>。一般来说，一个进程代表程序的一个实例，而 LWP 代表程序的执行线程，因为一个执行线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。</p><h3 id="线程上下文切换" tabindex="-1"><a class="header-anchor" href="#线程上下文切换"><span>线程上下文切换</span></a></h3><ul><li>当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；</li><li><strong>当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据</strong>；</li></ul><h2 id="调度" tabindex="-1"><a class="header-anchor" href="#调度"><span>调度</span></a></h2><p>当进程从一个运行状态到另外一状态变化的时候，会触发一次调度。</p><ul><li><strong>非抢占式调度算法</strong>挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。</li><li><strong>抢占式调度算法</strong>挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生<strong>时钟中断</strong>，以便把 CPU 控制返回给调度程序进行调度，也就是常说的<strong>时间片机制</strong>。</li></ul><h3 id="调度算法" tabindex="-1"><a class="header-anchor" href="#调度算法"><span>调度算法</span></a></h3><ol><li><p>先到先服务</p><p>非抢占式的先来先服务<strong>First Come First Serve, FCFS</strong></p><p>对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统。</p></li><li><p>最短作业优先</p></li></ol><p><strong>Shortest Job First, SJF</strong>，<strong>优先选择运行时间最短的进程来运行</strong>，这有助于提高系统的吞吐量。</p><ol start="3"><li><p>高响应比优先</p><p>权衡短作业和长作业。</p><p><strong>每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行</strong>，</p><p><img src="https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230424225535870.png" alt="image-20230424225535870"></p></li><li><p>时间片轮转</p><p><strong>Round Robin, RR</strong>每个进程被分配一个时间段，称为时间片（Quantum），即允许该进程在该时间段中运行。</p><ul><li>如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配给另外一个进程；</li><li>如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；</li></ul><p>另外，时间片的长度就是一个很关键的点：</p><ul><li>如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；</li><li>如果设得太长又可能引起对短作业进程的响应时间变长。</li></ul><p>一般来说，时间片设为 <code>20ms~50ms</code> 通常是一个比较合理的折中值。</p></li><li><p>最高优先级</p><p><strong>Highest Priority First，HPF</strong></p><p>进程的优先级可以分为，静态优先级和动态优先级：</p><ul><li>静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；</li><li>动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是<strong>随着时间的推移增加等待进程的优先级</strong>。</li></ul><p>该算法也有两种处理优先级高的方法，非抢占式和抢占式：</p><ul><li>非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。</li><li>抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。</li></ul><p>但是依然有缺点，可能会导致低优先级的进程永远不会运行。</p></li><li><p><strong>多级反馈队列（Multilevel Feedback Queue）</strong></p><p>「时间片轮转算法」和「最高优先级算法」的综合和发展。</p><ul><li>「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。</li><li>「反馈」表示如果有<strong>新的进程加入优先级高的队列</strong>时，立刻停止当前正在运行的进程，转而去<strong>运行优先级高的队列；</strong></li></ul><blockquote><ul><li><p>设置了多个队列，赋予每个队列不同的优先级，每个<strong>队列优先级从高到低</strong>，同时<strong>优先级越高时间片越短</strong>；</p></li><li><p>新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；</p></li><li><p>当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；</p><p><img src="https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230425102530489.png" alt="image-20230425102530489"></p></li></ul><p>可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，<strong>虽然等待的时间变长了，但是运行时间也变更长了</strong>，所以该算法很好的<strong>兼顾了长短作业，同时有较好的响应时间。</strong></p></blockquote></li></ol><h2 id="线程池的核心参数🌟" tabindex="-1"><a class="header-anchor" href="#线程池的核心参数🌟"><span>线程池的核心参数🌟</span></a></h2><p>任务执行完后要保留？核心线程：救急线程</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212161917922.png" alt="image-20230212161917922"></p><h3 id="拒绝策略" tabindex="-1"><a class="header-anchor" href="#拒绝策略"><span>拒绝策略</span></a></h3><p>AbortPolicy</p><p>所有线程耗尽，新任务不能执行</p><p>CallerRunsPolicy</p><p>谁调用，谁执行</p><p>DiscardOldestPolicy</p><p>丢弃等待最久的任务</p><h3 id="sleep-wait方法对比" tabindex="-1"><a class="header-anchor" href="#sleep-wait方法对比"><span>sleep wait方法对比</span></a></h3><p>共同：效果都是让当前线程放弃CPU使用权，进入堵塞</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212183913901.png" alt="image-20230212183913901"></p><p><code>wait()</code>方法必须配合LOCK一起用</p><p>需要获得LOCK之后再调用</p><h3 id="lock-和-synchronized-对比" tabindex="-1"><a class="header-anchor" href="#lock-和-synchronized-对比"><span>lock 和 synchronized 对比</span></a></h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212194339949.png" alt="image-20230212194339949"></p><h4 id="lock锁的特性" tabindex="-1"><a class="header-anchor" href="#lock锁的特性"><span>lock锁的特性</span></a></h4><p>阻塞</p><p>公平锁与非公平锁</p><h5 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量"><span>条件变量</span></a></h5><p>condition</p><h3 id="volatile能否保证线程安全" tabindex="-1"><a class="header-anchor" href="#volatile能否保证线程安全"><span>volatile能否保证线程安全</span></a></h3><p>是三个方面：可见性、有序性、原子性</p><p>可见✅</p><p>有序✅</p><p>原子</p><blockquote><p>eg：加减运算</p><ol><li>原始值</li><li>getstatic</li><li>inconstant_变化值</li><li>iadd</li><li>putstatic</li></ol></blockquote><p>一条代码的底层可能对应多条指令</p><p>多线程下指令的交错（可以用锁解决）</p>',118)]))}const g=i(a,[["render",e]]),c=JSON.parse(`{"path":"/os/1%20%E8%BF%9B%E7%A8%8B%EF%BD%9C%E7%BA%BF%E7%A8%8B.html","title":"线程和进程","lang":"en-US","frontmatter":{"description":"线程和进程 进程是资源（包括内存、打开的文件等）分配的单位， 线程是 CPU 调度的单位； 在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈； 线程同样具有就绪、阻塞、执行三种基本状态...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程和进程\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230424195053672.png\\",\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230424225535870.png\\",\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230425102530489.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212161917922.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212183913901.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230212194339949.png\\"],\\"dateModified\\":\\"2025-08-18T03:49:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/os/1%20%E8%BF%9B%E7%A8%8B%EF%BD%9C%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"线程和进程"}],["meta",{"property":"og:description","content":"线程和进程 进程是资源（包括内存、打开的文件等）分配的单位， 线程是 CPU 调度的单位； 在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈； 线程同样具有就绪、阻塞、执行三种基本状态..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230424195053672.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-08-18T03:49:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T03:49:31.000Z"}]]},"git":{"createdTime":1682502198000,"updatedTime":1755488971000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"},{"name":"kory","username":"kory","email":"apple@kuangyongbeideMacBook-Air.local","commits":1,"url":"https://github.com/kory"}]},"readingTime":{"minutes":17.24,"words":5173},"filePathRelative":"os/1 进程｜线程.md","excerpt":"\\n<p>进程是资源（包括内存、打开的文件等）分配的单位，</p>\\n<p>线程是 CPU 调度的单位；</p>\\n<p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p>\\n<ul>\\n<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li>\\n<li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li>\\n</ul>\\n<p><strong>线程更能减少开销</strong>，体现在时间效率，还是空间效率比进程都要高：</p>\\n<ul>\\n<li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li>\\n<li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li>\\n<li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li>\\n<li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li>\\n</ul>","autoDesc":true}`);export{g as comp,c as data};
