const e=JSON.parse(`{"key":"v-f032190e","path":"/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/3%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"en-US","frontmatter":{"description":"单例模式 一个类只有一个实例 实现方式 方法1 饿汉式 私有构造 静态成员变量 提供公共静态方法 可能破坏的方式 反射 预防方法 if (INSTANCE != null) {throw Exception} 反序列化 预防方法 重写readResolve方法，防止返回的是反序列化的结果 public Object readResolve() { ​\\tReturn INSTANCE; } Unsafe","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/3%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式 一个类只有一个实例 实现方式 方法1 饿汉式 私有构造 静态成员变量 提供公共静态方法 可能破坏的方式 反射 预防方法 if (INSTANCE != null) {throw Exception} 反序列化 预防方法 重写readResolve方法，防止返回的是反序列化的结果 public Object readResolve() { ​\\tReturn INSTANCE; } Unsafe"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-04T03:37:43.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-02-04T03:37:43.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/3%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}]]},"headers":[{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[{"level":3,"title":"方法1 饿汉式","slug":"方法1-饿汉式","link":"#方法1-饿汉式","children":[]},{"level":3,"title":"方法2 枚举饿汉式","slug":"方法2-枚举饿汉式","link":"#方法2-枚举饿汉式","children":[]},{"level":3,"title":"方法3 懒汉式","slug":"方法3-懒汉式","link":"#方法3-懒汉式","children":[]},{"level":3,"title":"方法4 DCL懒汉式","slug":"方法4-dcl懒汉式","link":"#方法4-dcl懒汉式","children":[]},{"level":3,"title":"方法5 内部类懒汉式","slug":"方法5-内部类懒汉式","link":"#方法5-内部类懒汉式","children":[]}]},{"level":2,"title":"jdk哪些地方体现了单例模式","slug":"jdk哪些地方体现了单例模式","link":"#jdk哪些地方体现了单例模式","children":[]}],"git":{"createdTime":1675481863000,"updatedTime":1675481863000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":1.66,"words":498},"localizedDate":"February 4, 2023","filePathRelative":"se/BackEnd/🌟 java集合/1 基础/3 单例模式.md","excerpt":"<h1> 单例模式</h1>\\n<p>一个类只有一个实例</p>\\n<h2> 实现方式</h2>\\n<h3> 方法1 饿汉式</h3>\\n<ol>\\n<li>私有构造</li>\\n<li>静态成员变量</li>\\n<li>提供公共静态方法</li>\\n</ol>\\n<h4> 可能破坏的方式</h4>\\n<ol>\\n<li>\\n<p>反射</p>\\n<blockquote>\\n<p>预防方法</p>\\n<p><code>if (INSTANCE != null) {throw Exception}</code></p>\\n</blockquote>\\n</li>\\n<li>\\n<p>反序列化</p>\\n<blockquote>\\n<p>预防方法</p>\\n<p>重写readResolve方法，防止返回的是反序列化的结果</p>\\n<p><code>public Object readResolve() {</code></p>\\n<p>​\\t<code>Return INSTANCE;</code></p>\\n<p><code>}</code></p>\\n</blockquote>\\n</li>\\n<li>\\n<p>Unsafe</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
