const n=JSON.parse(`{"key":"v-3f08e41f","path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/3%20%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.html","title":"完全二叉树","lang":"en-US","frontmatter":{"description":"完全二叉树 一棵完全二叉树的两棵子树，至少有一棵是满二叉树： 节点个数 满二叉树 (int) Math.pow(2, h) - 1; 普通二叉树 1 + countNodes(root.left) + countNodes(root.right) 完全二叉树最大深度在两侧，所以可以这样求深度 public int countNodes(TreeNode root) { // 沿最左侧和最右侧分别计算高度 TreeNode l = root, r = root; int hl = 0, hr = 0; while (l != null) { l = l.left; hl++; } while (r != null) { r = r.right; hr++; } // 如果左右侧计算的高度相同，则是一棵满二叉树 if (hl == hr) { return (int) Math.pow(2, hl) - 1; } // 如果左右侧的高度不同，则按照普通二叉树的逻辑计算 return 1 + countNodes(root.left) + countNodes(root.right); }","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/3%20%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"完全二叉树"}],["meta",{"property":"og:description","content":"完全二叉树 一棵完全二叉树的两棵子树，至少有一棵是满二叉树： 节点个数 满二叉树 (int) Math.pow(2, h) - 1; 普通二叉树 1 + countNodes(root.left) + countNodes(root.right) 完全二叉树最大深度在两侧，所以可以这样求深度 public int countNodes(TreeNode root) { // 沿最左侧和最右侧分别计算高度 TreeNode l = root, r = root; int hl = 0, hr = 0; while (l != null) { l = l.left; hl++; } while (r != null) { r = r.right; hr++; } // 如果左右侧计算的高度相同，则是一棵满二叉树 if (hl == hr) { return (int) Math.pow(2, hl) - 1; } // 如果左右侧的高度不同，则按照普通二叉树的逻辑计算 return 1 + countNodes(root.left) + countNodes(root.right); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-28T04:48:25.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-02-28T04:48:25.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/3%20%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.html"}]]},"headers":[{"level":2,"title":"节点个数","slug":"节点个数","link":"#节点个数","children":[]}],"git":{"createdTime":1676187391000,"updatedTime":1677559705000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":2}]},"readingTime":{"minutes":0.57,"words":171},"localizedDate":"February 12, 2023","filePathRelative":"algo/📓 总结/📒 二叉树/3 完全二叉树.md","excerpt":"<h1> 完全二叉树</h1>\\n<p>一棵完全二叉树的两棵子树，至少有一棵是满二叉树：</p>\\n<h2> 节点个数</h2>\\n<p>满二叉树</p>\\n<p><code>(int) Math.pow(2, h) - 1;</code></p>\\n<p>普通二叉树</p>\\n<p><code>1 + countNodes(root.left) + countNodes(root.right)</code></p>\\n<p>完全二叉树最大深度在两侧，所以可以这样求深度</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">countNodes</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeNode</span> root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 沿最左侧和最右侧分别计算高度</span>\\n    <span class=\\"token class-name\\">TreeNode</span> l <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">,</span> r <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> hl <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> hr <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        l <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n        hl<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        r <span class=\\"token operator\\">=</span> r<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n        hr<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 如果左右侧计算的高度相同，则是一棵满二叉树</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>hl <span class=\\"token operator\\">==</span> hr<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> hl<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token comment\\">// 如果左右侧的高度不同，则按照普通二叉树的逻辑计算</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">+</span> <span class=\\"token function\\">countNodes</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token function\\">countNodes</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
