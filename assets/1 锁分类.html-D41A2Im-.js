import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-fVbzsCFO.js";const p={};function t(o,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h1><p>定义：计算机协调多个进程或线程并发访问某一资源的机制</p><p>出了传统的计算资源（CPU、RAM、I/O）的争用外，数据也是供许多用户共享的资源</p><p>锁冲突也是影响数据库并发访问性能的重要因素</p><p>MySQL中，按照锁的粒度分为以下三类：</p><h3 id="_1⃣️-全局锁" tabindex="-1"><a class="header-anchor" href="#_1⃣️-全局锁"><span>1⃣️ 全局锁</span></a></h3><p>锁定数据库中所有表，所有数据就只读，后续的DML的写入语句、DDL、更新操作的事务提交语句都会被阻塞</p><p><strong>典型应用</strong></p><p>全库的逻辑备份，获取一致性视图、保证数据完整性、一致性</p><p><strong>备份过程</strong></p><ol><li><p>对当前数据库加全局锁：<code>flush tales with read lock;</code></p></li><li><p>借助工具、输入<code>-u</code>账号<code>-p</code>密码、存储路径、存储的文件名<code>mysqldump -uroot -ppassword data &gt; Desktop\\data.sql</code></p><blockquote><p>这一步不能在MySQL命令行中进行，应该在普通命令行中</p><p><code>-h</code>指定主机地址</p><p><code>mysqldump -hxxx.xxx.xxx -uroot -ppassword data &gt; Desktop\\data.sql</code></p></blockquote></li><li><p>解锁：<code>unlock tables;</code>当会话断开了，全局锁会被自动释放。</p></li></ol><p><strong>问题</strong></p><ol><li>如果在主库上备份，期间都不能更新，业务停摆</li><li>如果在从库上备份，期间都不能执行主库同步过来的二进制日志（binlog），导致主从延迟</li></ol><h5 id="避免影响业务的解决办法" tabindex="-1"><a class="header-anchor" href="#避免影响业务的解决办法"><span>避免影响业务的解决办法</span></a></h5><p>如果数据库的引擎支持的事务支持<strong>可重复读的隔离级别</strong>，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。</p><p>在InnoDB引擎中，可以在备份时加上参数 --single-transaction 完成不加锁的一致性数据备份</p><blockquote><p><code>mysqldump --single-transaction -uroot -ppassowrd it &gt; it.sql</code></p></blockquote><h3 id="_2⃣️-表级锁" tabindex="-1"><a class="header-anchor" href="#_2⃣️-表级锁"><span>2⃣️ 表级锁</span></a></h3><p>每次操作锁住整张表，发生锁冲突的概率最高、并发度最低</p><p>表级锁分类：</p><h4 id="_1-表锁" tabindex="-1"><a class="header-anchor" href="#_1-表锁"><span>1 表锁</span></a></h4><h5 id="_1-表共享读锁-read-lock" tabindex="-1"><a class="header-anchor" href="#_1-表共享读锁-read-lock"><span>1） 表共享读锁 read lock</span></a></h5><p>不阻塞读，但是阻塞写（对其他客户端也是）</p><p>直到unlock，才会结束阻塞</p><h5 id="_2-表独占写锁-write-lock" tabindex="-1"><a class="header-anchor" href="#_2-表独占写锁-write-lock"><span>2） 表独占写锁 write lock</span></a></h5><p>自己可以读可以写，其他客户端不能读不能写</p><p>语法：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 加锁</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lock tables 表名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 解锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tables;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 或者将客户端断开，就会自动解锁</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-元数据锁-meta-data-lock-mdl" tabindex="-1"><a class="header-anchor" href="#_2-元数据锁-meta-data-lock-mdl"><span>2 元数据锁（meta data lock, MDL）</span></a></h4><p>系统自动控制，不用显式使用，访问一张表的时候自动加上</p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li><li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li></ul><p>作用：维护表元数据的数据一致性、避免DML和DDL冲突，保证读写的正确性</p><blockquote><p>MySQL5.5后引入MDL，对一张表crud时，加MDL读锁（共享）；变更表结构时，加MDL写锁（排他）</p></blockquote><p>当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。</p><p>反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。</p><h5 id="释放时间" tabindex="-1"><a class="header-anchor" href="#释放时间"><span>释放时间</span></a></h5><p>在事务提交后才会释放，这意味着<strong>事务执行期间，MDL 是一直持有的</strong>。</p><h4 id="_3-意向锁" tabindex="-1"><a class="header-anchor" href="#_3-意向锁"><span>3 意向锁</span></a></h4><p>避免执行DML时，行锁与表锁的冲突，在InnoDB中加入了意向锁</p><p>表锁不用检查每行数据是否加锁，<strong>快速判断表里是否有记录被加锁</strong>。</p><blockquote><p>阻塞到线程A提交，意向锁释放</p></blockquote><p>意向锁分类：</p><h5 id="_1-意向共享锁-is" tabindex="-1"><a class="header-anchor" href="#_1-意向共享锁-is"><span>1. 意向共享锁 IS</span></a></h5><p>添加语句：<code>selcect...lock in share mode</code></p><p>与表锁共享锁read兼容，与表锁排他锁write互斥</p><h5 id="_2-意向排他锁-ix" tabindex="-1"><a class="header-anchor" href="#_2-意向排他锁-ix"><span>2. 意向排他锁 IX</span></a></h5><p>添加：<code>insert, update, delete, select...for update</code></p><p>与表锁共享锁read、表锁排他锁write都互斥</p><p><strong>意向锁之间不会互斥</strong></p><h5 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h5><p>在select语句后面加 <code>lock in share mode</code>，表示会加上这一行的共享锁</p><h5 id="查询锁" tabindex="-1"><a class="header-anchor" href="#查询锁"><span>查询锁</span></a></h5><p><code>select object_schema, object_name, index_name, lock_type, lock_mode, lock_data from performance_schema.data_locks;</code></p><h4 id="_4-auo-inc锁" tabindex="-1"><a class="header-anchor" href="#_4-auo-inc锁"><span>4 AUO-INC锁</span></a></h4><p>主键通常都会设置成自增的，这是通过对主键字段声明 <code>AUTO_INCREMENT</code> 属性实现的。</p><p>锁<strong>不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放</strong>。</p><p>一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 <code>AUTO_INCREMENT</code> 修饰的字段的值是连续递增的。</p><p>在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种<strong>轻量级的锁</strong>来实现自增。</p><p>一样也是在插入数据的时候，会为被 <code>AUTO_INCREMENT</code> 修饰的字段加上轻量级锁，<strong>然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁</strong>。</p><h3 id="_3⃣️-行级锁" tabindex="-1"><a class="header-anchor" href="#_3⃣️-行级锁"><span>3⃣️ 行级锁</span></a></h3><p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p><p>每次操作锁住对应的行数据</p><p>锁定粒度最小，发生锁冲突的概率最低、并发度最高</p><p>应用在InnoDB存储引擎中（事务、外键、行级锁）</p><p>普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为<strong>锁定读</strong>。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">//对读取的记录加共享锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... lock </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> share mode;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">//对读取的记录加独占锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必须在一个事务中，<strong>因为当事务提交了，锁就会被释放</strong></p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引项加锁实现，而不是对记录加锁</p><p>不同隔离级别下，行级锁的种类是不同的。</p><p>在<strong>读已提交</strong>隔离级别下，行级锁的种类<strong>只有记录锁，也就是仅仅把一条记录锁上。</strong></p><p>在<strong>可重复读</strong>隔离级别下，行级锁的种类除了有记录锁，<strong>还有间隙锁（目的是为了避免幻读）</strong>，所以行级锁的种类主要有三类：</p><ul><li>Record Lock，记录锁，也就是仅仅把一条记录锁上；</li><li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</li><li>Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li></ul><h4 id="_1-记录-行-锁-record-lock" tabindex="-1"><a class="header-anchor" href="#_1-记录-行-锁-record-lock"><span>1 记录（行）锁（record lock）</span></a></h4><p>锁定<strong>单个行记录</strong>，防止其他事务update, delete</p><p>在RC、RR隔离级别下都支持</p><h5 id="_1-共享锁-s" tabindex="-1"><a class="header-anchor" href="#_1-共享锁-s"><span>1. 共享锁（S）</span></a></h5><p>允许一个事务读一行，组织其他事务获得相同数据集的排他锁</p><p>（S 型与 S 锁兼容，与 X 锁不兼容）</p><h5 id="_2-排他锁-x" tabindex="-1"><a class="header-anchor" href="#_2-排他锁-x"><span>2. 排他锁（X）</span></a></h5><p>允许获取排他锁的事务更新数据，组织其他事务获得相同数据集的共享锁、排他锁</p><p>都不兼容</p><h4 id="_2-间隙锁-gap-lock" tabindex="-1"><a class="header-anchor" href="#_2-间隙锁-gap-lock"><span>2 间隙锁（gap lock）</span></a></h4><p>锁定索引记录间隙（不包含记录），防止其他事务对间隙insert，产生幻读</p><p>间隙锁可以共存，一个事务的间隙锁不会组织另一个事务在同一间隙上采用间隙锁，虽然有 S 和 X 类型不存在互斥关系</p><p>只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p><blockquote><p>InnoDB默认RR级别运行，使用临键锁进行搜索和索引扫描、以防幻读</p><ol><li>索引上的等值查询（唯一索引）：给不存在的记录加锁，优化为间隙锁</li><li>索引上的等值查询（普通索引）：向右遍历，最后一个值不满足查询需求时，next-key lock退化为间隙锁</li><li>索引上的范围查询（唯一索引）：访问到不满足条件的第一个值为止</li></ol></blockquote><h4 id="_3-临键锁-next-key-lock" tabindex="-1"><a class="header-anchor" href="#_3-临键锁-next-key-lock"><span>3 临键锁（next-key lock）</span></a></h4><p>行锁和间隙锁的组合，同时锁住数据、数据前面的间隙</p><p>即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中</p><p>有 S 和 X 类型，存在互斥关系</p><p>在RR级别下支持</p><blockquote><p>InnoDB默认RR级别运行，使用临键锁进行搜索和索引扫描、以防幻读</p><ol><li>针对唯一索引检索，对已存在的记录等值匹配时，自动优化为行锁</li><li>InnoDB行锁是针对索引加的锁，不通过索引检索数据，那么InnoDB将对所有记录加锁，<strong>升级为表锁</strong></li></ol></blockquote><h4 id="_4-插入意向锁" tabindex="-1"><a class="header-anchor" href="#_4-插入意向锁"><span>4 插入意向锁</span></a></h4><p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。</p><p>如果有的话，插入操作就会发生<strong>阻塞</strong>，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个<strong>插入意向锁</strong>，表明有事务想在某个区间插入新记录，但是现在处于等待状态。</p><p>并<strong>不是意向锁，它是一种特殊的间隙锁，属于行级别锁</strong>。</p><h4 id="怎么加的行级锁" tabindex="-1"><a class="header-anchor" href="#怎么加的行级锁"><span>怎么加的行级锁？</span></a></h4><h5 id="_1-没有加索引的查询" tabindex="-1"><a class="header-anchor" href="#_1-没有加索引的查询"><span>1）没有加索引的查询</span></a></h5><p>如果锁定读查询语句，没有使用索引列作为查询条件，或者查询语句没有走索引查询、update 和 delete 语句如果查询条件不加索引，就会导致扫描是全表扫描。</p><p>那么，每一条记录的索引上都会加 next-key 锁，这样就相当于锁住的全表，这时如果其他事务对该表进行增、删、改操作的时候，都会被阻塞。</p><h5 id="_2-唯一索引等值查询" tabindex="-1"><a class="header-anchor" href="#_2-唯一索引等值查询"><span>2）唯一索引等值查询</span></a></h5><ul><li>当查询的记录是「存在」的，在索引树上定位到这一条记录后，将该记录的索引中的 邻键锁 会<strong>退化成「记录锁」</strong>。</li><li>当查询的记录是「不存在」的，在索引树找到第一条大于该查询记录的记录后，将该记录的索引中的 next-key lock 会<strong>退化成「间隙锁」</strong>。</li></ul><h5 id="_3-非唯一索引等值查询" tabindex="-1"><a class="header-anchor" href="#_3-非唯一索引等值查询"><span>3）非唯一索引等值查询</span></a></h5><ul><li><p>当查询的记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合条件的二级索引记录就停止扫描。</p></li><li><p>在扫描的过程中，对扫描到的二级索引记录加的是 <strong>临键锁</strong>，而对于第一个不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成 <strong>间隙锁</strong>。同时，在符合条件的记录的主键索引上加<strong>记录锁</strong>。</p><blockquote><p>扫描到的二级索引：临键锁</p><p>第一个不符合条件的二级索引记录：退化为间隙锁</p><p>符合条件的记录的主键索引：加记录锁</p></blockquote></li><li><p>当查询的记录「不存在」时，<strong>扫描到第一条不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。因为不存在满足查询条件的记录，所以不会对主键索引加锁</strong>。</p></li></ul><p>非唯一索引和主键索引的范围查询的加锁规则不同之处在于：</p><ul><li>唯一索引在满足一些条件的时候，索引的 next-key lock 退化为间隙锁或者记录锁。</li><li><strong>非唯一</strong>索引范围查询，索引的 next-key lock <strong>不会退化</strong>为间隙锁和记录锁。</li></ul><p>MySQL 为什么要这样加锁，主要要以避免幻读角度去分析。</p><h3 id="update语句与表锁" tabindex="-1"><a class="header-anchor" href="#update语句与表锁"><span>update语句与表锁</span></a></h3><p>当我们要执行 update 语句的时候，确保 where 条件中带上了索引列，并且在测试机确认该语句是否走的是索引扫描，防止因为扫描全表，而对表中的所有记录加上锁。</p><p>打开 <code>MySQL sql_safe_updates</code> 参数，这样可以预防 update 操作时 where 条件没有带上索引列。</p><p>如果发现即使在 where 条件中带上了列索引列，优化器走的还是全标扫描，这时我们就要使用 <code>force index([index_name])</code> 可以告诉优化器使用哪个索引。</p><p>MySQL 的可重复读隔离级别下，针对当前读的语句会对<strong>索引</strong>加记录锁+间隙锁，这样可以避免其他事务执行增、删、改时导致幻读的问题。</p><p>有一点要注意的是，在执行 update、delete、select ... for update 等具有加锁性质的语句，一定要检查语句是否走了索引，如果是全表扫描的话，会对每一个索引加 next-key 锁，相当于把整个表锁住了，不会导致幻读。</p>`,113)]))}const d=a(p,[["render",t]]),h=JSON.parse(`{"path":"/cs/database/mysql/%F0%9F%93%93%207%20%E9%94%81/1%20%E9%94%81%E5%88%86%E7%B1%BB.html","title":"锁","lang":"en-US","frontmatter":{"description":"锁 定义：计算机协调多个进程或线程并发访问某一资源的机制 出了传统的计算资源（CPU、RAM、I/O）的争用外，数据也是供许多用户共享的资源 锁冲突也是影响数据库并发访问性能的重要因素 MySQL中，按照锁的粒度分为以下三类： 1⃣️ 全局锁 锁定数据库中所有表，所有数据就只读，后续的DML的写入语句、DDL、更新操作的事务提交语句都会被阻塞 典型应用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-09T08:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%207%20%E9%94%81/1%20%E9%94%81%E5%88%86%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"锁"}],["meta",{"property":"og:description","content":"锁 定义：计算机协调多个进程或线程并发访问某一资源的机制 出了传统的计算资源（CPU、RAM、I/O）的争用外，数据也是供许多用户共享的资源 锁冲突也是影响数据库并发访问性能的重要因素 MySQL中，按照锁的粒度分为以下三类： 1⃣️ 全局锁 锁定数据库中所有表，所有数据就只读，后续的DML的写入语句、DDL、更新操作的事务提交语句都会被阻塞 典型应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-09T08:02:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-09T08:02:29.000Z"}]]},"git":{"createdTime":1680751264000,"updatedTime":1681027349000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":2,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":10.78,"words":3233},"filePathRelative":"cs/database/mysql/📓 7 锁/1 锁分类.md","excerpt":"\\n<p>定义：计算机协调多个进程或线程并发访问某一资源的机制</p>\\n<p>出了传统的计算资源（CPU、RAM、I/O）的争用外，数据也是供许多用户共享的资源</p>\\n<p>锁冲突也是影响数据库并发访问性能的重要因素</p>\\n<p>MySQL中，按照锁的粒度分为以下三类：</p>\\n<h3>1⃣️ 全局锁</h3>\\n<p>锁定数据库中所有表，所有数据就只读，后续的DML的写入语句、DDL、更新操作的事务提交语句都会被阻塞</p>\\n<p><strong>典型应用</strong></p>\\n<p>全库的逻辑备份，获取一致性视图、保证数据完整性、一致性</p>\\n<p><strong>备份过程</strong></p>","autoDesc":true}`);export{d as comp,h as data};
