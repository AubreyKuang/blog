import{_ as n,V as s,W as e,a0 as a}from"./framework-91a010c2.js";const o={},c=a(`<h1 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h1><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h2><ul><li><p>保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p></li><li><p><strong>防止 JVM 的指令重排序。</strong> 如果我们将变量声明为 <strong><code>volatile</code></strong> ，在对这个变量进行读写操作的时候，会通过插入特定的 <strong>内存屏障</strong> 的方式来禁止指令重排序。</p></li></ul><h3 id="不原子性" tabindex="-1"><a class="header-anchor" href="#不原子性" aria-hidden="true">#</a> 不原子性</h3><h4 id="自增操作" tabindex="-1"><a class="header-anchor" href="#自增操作" aria-hidden="true">#</a> 自增操作</h4><p>自增操作 inc ++ 不是原子性的：</p><ol><li>读取 inc 的值。</li><li>对 inc 加 1。</li><li>将 inc 的值写回内存。</li></ol><p><code>volatile</code> 是无法保证这三个操作是具有原子性，可能导致：</p><p>线程 1 对 <code>inc</code> 进行读取操作之后，还未对其进行修改。线程 2 又读取了 <code>inc</code>的值并对其进行修改（+1），再将<code>inc</code> 的值写回内存。</p><p>线程 2 操作完毕后，线程 1 对 <code>inc</code>的值进行修改（+1），再将<code>inc</code> 的值写回内存。</p><p>两个线程分别对 <code>inc</code> 进行了一次自增操作后，<code>inc</code> 实际上只增加了 1。</p><p>改进：</p><p><code>synchronized</code> 、<code>Lock</code>或者<code>AtomicInteger</code>都可以。</p><p><img src="https://cdn.jsdelivr.net/gh/KoryKL/pictures@main/blog/image-20230426165157420.png" alt="image-20230426165157420" loading="lazy"></p><h3 id="双重校验锁实现单例模式" tabindex="-1"><a class="header-anchor" href="#双重校验锁实现单例模式" aria-hidden="true">#</a> 双重校验锁实现单例模式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span>
  
  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断对象是否实例化，没有实例化后才进入加锁代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 类对象加锁</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code> uniqueInstance = new Singleton():</code></p><ol><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。</p><p>指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程<strong>获得还没有初始化的实例</strong>。</p><p>例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><blockquote><p>在JDK1.8中，<code>java.lang.Runtime</code>类使用了双重校验锁实现的单例模式。以下是该类的示例代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>class Runtime <span class="token punctuation">{</span>
    private static volatile Runtime currentRuntime<span class="token punctuation">;</span>
    public static Runtime <span class="token function-name function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRuntime <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            synchronized <span class="token punctuation">(</span>Runtime.class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRuntime <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    currentRuntime <span class="token operator">=</span> new Runtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token builtin class-name">return</span> currentRuntime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    // other methods<span class="token punctuation">..</span>.
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>currentRuntime</code>是一个<code>volatile</code>类型的静态变量，它确保了多线程环境下的可见性。<code>getRuntime()</code>方法首先检查<code>currentRuntime</code>是否为<code>null</code>，如果是，则进入同步块。在同步块中，再次检查<code>currentRuntime</code>是否为<code>null</code>，如果是，则创建一个新的<code>Runtime</code>对象并赋值给<code>currentRuntime</code>。最后，返回<code>currentRuntime</code>对象。这种方式可以保证在多线程环境下只创建一个<code>Runtime</code>对象。</p></blockquote><h2 id="乐观锁悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁悲观锁" aria-hidden="true">#</a> 乐观锁悲观锁</h2><h3 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁" aria-hidden="true">#</a> 悲观锁</h3><p>认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。</p><p>也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p><p>像 Java 中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p>高并发的场景下，激烈的锁竞争会造成线程阻塞，大量<strong>阻塞线程会导致系统的上下文切换，增加系统的性能开销</strong>。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。</p><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁</h3><p>认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在<strong>提交修改的时候去验证</strong>对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）。</p><p>高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁的问题，在性能上往往会更胜一筹。</p><p>但是，如果<strong>冲突频繁发生</strong>（写占比非常多的情况），会<strong>频繁失败和重试</strong>，这样同样会非常影响性能，导致 CPU 飙升。</p><p>不过，大量失败重试的问题也是可以解决的，借助 <code>LongAdder</code>以空间换时间的方式就解决了这个问题。</p><ul><li>悲观锁通常多用于写比较多的情况下（多写场景，竞争激烈），这样可以避免频繁失败和重试影响性能，悲观锁的开销是固定的。不过，如果乐观锁解决了频繁失败和重试这个问题的话（比如<code>LongAdder</code>），也是可以考虑使用乐观锁的，要视实际情况而定。</li><li>乐观锁通常多于写比较少的情况下（多读场景，竞争较少），这样可以避免频繁加锁影响性能。不过，乐观锁主要针对的对象是<strong>单个共享变量</strong>（参考<code>java.util.concurrent.atomic</code>包下面的原子变量类）。</li></ul><h4 id="乐观锁的实现" tabindex="-1"><a class="header-anchor" href="#乐观锁的实现" aria-hidden="true">#</a> 乐观锁的实现</h4><h5 id="版本号机制" tabindex="-1"><a class="header-anchor" href="#版本号机制" aria-hidden="true">#</a> 版本号机制</h5><p>在数据表中加上一个数据版本号 <code>version</code> 字段，表示数据被修改的次数。当数据被修改时，<code>version</code> 值会加一。</p><p>当线程 A 要更新数据值时，在<strong>读取数据的同时也会读取 <code>version</code> 值</strong>，在<strong>提交更新</strong>时，若<strong>刚才读取</strong>到的 version 值为<strong>当前</strong>数据库中的 <code>version</code> 值相等时才更新，否则重试更新操作，直到更新成功。</p><h5 id="cas-算法" tabindex="-1"><a class="header-anchor" href="#cas-算法" aria-hidden="true">#</a> CAS 算法</h5><p><strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。</p><blockquote><p><strong>原子操作</strong> 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。</p></blockquote><p>CAS 涉及到三个操作数：</p><ul><li><strong>V</strong> ：要更新的变量值(Var)</li><li><strong>E</strong> ：预期值(Expected)</li><li><strong>N</strong> ：拟写入的新值(New)</li></ul><p>当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。<strong>如果不等，说明已经有其它线程更新了</strong> V，则当前线程放弃更新。</p><h4 id="乐观锁的问题" tabindex="-1"><a class="header-anchor" href="#乐观锁的问题" aria-hidden="true">#</a> 乐观锁的问题</h4><ol><li><p><strong>ABA 问题</strong></p><p>初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，不能说明没有被其他线程修改过了。在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。</p><p>解决思路是在变量前面追加上<strong>版本号或者时间戳</strong>。</p><blockquote><p>JDK 1.5 以后的 <code>AtomicStampedReference</code> 类就是用来解决 ABA 问题的，其中的 <code>compareAndSet()</code> 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p></blockquote></li><li><p><strong>循环时间长开销大</strong></p><p>CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。</p><blockquote><p>如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升，pause 指令有两个作用：</p><ol><li>可以延迟流水线执行指令，使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。</li><li>可以避免在退出循环的时候因内存顺序冲而引起 CPU 流水线被清空，从而提高 CPU 的执行效率。</li></ol></blockquote></li><li><p><strong>只能保证一个共享变量的原子操作</strong></p><p>只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。</p><blockquote><p>但是从 JDK 1.5 开始，提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用<code>AtomicReference</code>类把多个共享变量合并成一个共享变量来操作。</p></blockquote></li></ol><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> synchronized</h2><p>解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p>在 Java 早期版本中，<code>synchronized</code> 属于 <strong>重量级锁</strong>，效率低下。这是因为监视器锁（monitor）<strong>是依赖于底层的操作系统的 <code>Mutex Lock</code> 来实现的</strong>，Java 的线程是映射到操作系统的原生线程之上的。如果要<strong>挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态</strong>，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。</p><p>不过，在 Java 6 之后， <code>synchronized</code> <strong>引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销</strong>，这些优化让 <code>synchronized</code> 锁的效率提升了很多。因此， <code>synchronized</code> 还是可以在实际项目中使用的，像 JDK 源码、很多开源框架都大量使用了 <code>synchronized</code> 。</p><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h3><ol><li><p>修饰实例方法</p><p>给对象实例上锁；</p></li></ol><blockquote><p>以下两种都是对类上锁</p></blockquote><ol start="2"><li>修饰静态方法</li></ol><blockquote><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code> 方法之间的调用不互斥：</p><p>因为访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code> 方法占用的锁是当前实例对象锁。</p></blockquote><ol start="3"><li>修饰代码块</li></ol><p>对括号里指定的对象/类加锁：</p><ul><li>尽量不要使用 <code>synchronized(String a)</code> 因为 JVM 中，字符串常量池具有缓存功能。</li></ul><h3 id="可以修饰构造方法吗" tabindex="-1"><a class="header-anchor" href="#可以修饰构造方法吗" aria-hidden="true">#</a> 可以修饰构造方法吗？</h3><p><strong>不能使用 synchronized 关键字修饰。</strong></p><p>构造方法本身就属于线程安全的，不存在同步的构造方法一说。</p><h3 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理？</h3>`,63),t=[c];function i(p,d){return s(),e("div",null,t)}const r=n(o,[["render",i],["__file","2 关键字｜乐观锁.html.vue"]]);export{r as default};
