import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-fVbzsCFO.js";const p={};function o(t,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="innodb引擎" tabindex="-1"><a class="header-anchor" href="#innodb引擎"><span>InnoDB引擎</span></a></h1><h2 id="_1⃣️-逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#_1⃣️-逻辑存储结构"><span>1⃣️ 逻辑存储结构</span></a></h2><p><strong>表空间</strong>：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引</p><p><strong>段</strong>：数据段、索引段、回滚段</p><blockquote><p>InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点</p></blockquote><p><strong>区</strong>：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页</p><p><strong>页</strong>：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区</p><p><strong>行</strong>：按行存放</p><h2 id="_2⃣️-架构" tabindex="-1"><a class="header-anchor" href="#_2⃣️-架构"><span>2⃣️ 架构</span></a></h2><p>InnoDB：擅长事务处理、拥有崩溃恢复等特性</p><p>内存结构 ｜后台线程｜ 磁盘结构</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109145424176.png" alt="image-20230109145424176"></p><h3 id="内存架构" tabindex="-1"><a class="header-anchor" href="#内存架构"><span>内存架构</span></a></h3><h4 id="_1-buffer-pool" tabindex="-1"><a class="header-anchor" href="#_1-buffer-pool"><span>1 Buffer Pool</span></a></h4><p>缓冲池，缓存磁盘上经常操作的数据，<strong>增删改查</strong>先操作缓冲池（若缓冲池没有数据，从磁盘加载并缓存）</p><p>再以一定频率刷新到磁盘，减少磁盘IO，加快处理速度</p><p>以页为单位缓冲数据，可以通过 <code>innodb_buffer_pool_size</code> 参数调整缓冲池的大小，默认是 128 M。</p><p>Innodb 通过三种链表来管理缓页：</p><ul><li>Free List （空闲页链表），管理空闲页；</li><li>Flush List （脏页链表），管理脏页；</li><li>LRU List，管理脏页+干净页，将最近且经常查询的数据缓存在其中，而不常查询的数据就淘汰出去。；</li></ul><p>InnoDB 对 LRU 做了一些优化，我们熟悉的 LRU 算法通常是将最近查询的数据放到 LRU 链表的头部，而 InnoDB 做 2 点优化：</p><ul><li>将 LRU 链表 分为<strong>young 和 old 两个区域</strong>，加入缓冲池的页，优先插入 old 区域；页被访问时，才进入 young 区域，目的是为了解决预读失效的问题。</li><li>当**「页被访问」且「 old 区域停留时间超过 <code>innodb_old_blocks_time</code> 阈值（默认为1秒）」**时，才会将页插入到 young 区域，否则还是插入到 old 区域，目的是为了解决批量数据访问，大量热数据淘汰的问题。</li></ul><p>可以通过调整 <code>innodb_old_blocks_pct</code> 参数，设置 young 区域和 old 区域比例。</p><p>在开启了慢 SQL 监控后，如果你发现「偶尔」会出现一些用时稍长的 SQL，这可因为脏页在刷新到磁盘时导致数据库性能抖动。如果在很短的时间出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。</p><h5 id="page" tabindex="-1"><a class="header-anchor" href="#page"><span>page</span></a></h5><p>缓冲池的单位，采用链表管理Page，有三种状态：</p><ul><li><p><strong>free page：空闲，未被使用</strong></p><p>为了能够快速找到空闲的缓存页，可以使用链表结构，将空闲缓存页的「控制块」作为链表的节点，这个链表称为 <strong>Free 链表</strong></p></li><li><p><strong>clean page：被使用，数据没有被修改</strong></p></li><li><p><strong>dirty page：被使用、被修改，与磁盘数据不一致</strong></p><p>为了能快速知道哪些缓存页是脏的，于是就设计出 <strong>Flush 链表</strong>，它跟 Free 链表类似的，链表的节点也是控制块，区别在于 Flush 链表的元素都是脏页。</p></li></ul><h5 id="提高缓存命中率-lru" tabindex="-1"><a class="header-anchor" href="#提高缓存命中率-lru"><span>提高缓存命中率 LRU</span></a></h5><p>LRU（Least recently used）算法</p><p>链表头部的节点是最近使用的，而链表末尾的节点是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，从而腾出空间。</p><p>实现思路：</p><ul><li>当访问的页在 Buffer Pool 里，就直接把该页对应的 LRU 链表节点移动到链表的头部。</li><li>当访问的页不在 Buffer Pool 里，除了要把页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的节点。</li></ul><p>预读问题：</p><p>程序是有空间局部性的，靠近当前被访问数据的数据，在未来很大概率会被访问到。所以，MySQL 在加载数据页时，会提前把它相邻的数据页一并加载进来，目的是为了减少磁盘 IO。</p><p>但是可能这些<strong>被提前加载进来的数据页，并没有被访问</strong>，相当于这个预读是白做了，这个就是<strong>预读失效</strong>。</p><p>如果这些预读页如果一直不会被访问到，就会导致不会被访问的预读页却占用了 LRU 链表前排的位置，<strong>而末尾淘汰的页，可能是频繁访问</strong>的页，这样就大大降低了缓存命中率。</p><p>改进：</p><p><strong>让预读的页停留在 Buffer Pool 里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在 Buffer Pool 里的时间尽可能长</strong>。</p><p>改进了 LRU 算法，将 LRU 划分了 2 个区域：<strong>old 区域 和 young 区域</strong>。<strong>预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部</strong>。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。</p><h5 id="buffer-pool污染" tabindex="-1"><a class="header-anchor" href="#buffer-pool污染"><span>buffer pool污染</span></a></h5><p>当某一个 SQL 语句<strong>扫描了大量的数据</strong>时，在 Buffer Pool 空间比较有限的情况下，可能会将 <strong>Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了</strong>，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 IO，MySQL 性能就会急剧下降，这个过程被称为 <strong>Buffer Pool 污染</strong>。</p><p>注意， Buffer Pool 污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成 Buffer Pool 污染。</p><p>解决办法：进入到 young 区域条件增加了一个<strong>停留在 old 区域的时间判断</strong>。</p><p>在对某个处在 old 区域的缓存页进行第一次访问时，就在它对应的控制块中记录下来这个访问时间：</p><ul><li>如果后续的访问时间与第一次访问的时间<strong>在某个时间间隔内</strong>，那么<strong>该缓存页就不会被从 old 区域移动到 young 区域的头部</strong>；</li><li>如果后续的访问时间与第一次访问的时间<strong>不在某个时间间隔内</strong>，那么<strong>该缓存页移动到 young 区域的头部</strong>；</li></ul><p>这个间隔时间是由 <code>innodb_old_blocks_time</code> 控制的，默认是 1000 ms。</p><p>也就说，<strong>只有同时满足「被访问」与「在 old 区域停留时间超过 1 秒」两个条件，才会被插入到 young 区域头部</strong>，这样就解决了 Buffer Pool 污染的问题 。</p><p>另外，MySQL 针对 young 区域其实做了一个优化，为了防止 young 区域节点频繁移动到头部。young 区域前面 1/4 被访问不会移动到链表头部，只有后面的 3/4被访问了才会。</p><h5 id="脏页什么时候会刷入磁盘" tabindex="-1"><a class="header-anchor" href="#脏页什么时候会刷入磁盘"><span>脏页什么时候会刷入磁盘？</span></a></h5><p>引入了 Buffer Pool 后，当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，但是磁盘中还是原数据。</p><p>因此，脏页需要被刷入磁盘，保证缓存和磁盘数据一致，但是若每次修改数据都刷入磁盘，则性能会很差，因此一般都会在一定时机进行批量刷盘。</p><p>崩溃恢复方面，<strong>InnoDB 的更新</strong>操作采用的是 Write Ahead Log 策略，即<strong>先写日志，再写入磁盘</strong>，通过 redo log 日志让 MySQL 拥有了崩溃恢复能力。</p><p>下面几种情况会触发脏页的刷新：</p><ul><li>当 redo log 日志满了的情况下，会主动触发脏页刷新到磁盘；</li><li>Buffer Pool 空间不足时，需要将一部分数据页淘汰掉，如果淘汰的是脏页，需要先将脏页同步到磁盘；</li><li>MySQL 认为空闲时，后台线程会定期将适量的脏页刷入到磁盘；</li><li>MySQL 正常关闭之前，会把所有的脏页刷入到磁盘；</li></ul><p>在我们开启了慢 SQL 监控后，如果**「偶尔」会出现一些用时稍长的 SQL**，这可能是因为脏页在刷新到磁盘时可能会给数据库带来性能开销，导致数据库操作抖动。</p><p>如果间断出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。</p><h4 id="_2-chang-buffer" tabindex="-1"><a class="header-anchor" href="#_2-chang-buffer"><span>2 Chang Buffer</span></a></h4><p>更改缓冲区（针对非唯一二级索引页），执行DML时，如果这些数据没有在缓冲池中，不会直接操作磁盘，而会将数据变更存在更改缓冲区。未来数据被读取时，在讲数据合并恢复到缓冲池中，再将合并后的数据刷新到磁盘中。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109150050357.png" alt="image-20230109150050357"></p><h4 id="_3-adaptive-hash-index" tabindex="-1"><a class="header-anchor" href="#_3-adaptive-hash-index"><span>3 Adaptive Hash Index</span></a></h4><p>自适应哈希索引，用于优化对缓冲池数据的查询。InnoDB引擎监控表上各索引页的查询，如果观察到hash索引可以提升速度，就自动建立hash索引</p><p><code>show variables like &#39;%hash_index%&#39;;</code></p><h4 id="_4-log-buffer" tabindex="-1"><a class="header-anchor" href="#_4-log-buffer"><span>4 Log Buffer</span></a></h4><p>日志缓冲区，用来保存要写入到磁盘中的日志数据，定期刷新到磁盘中</p><p>如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO</p><p><code>show variables like &#39;%log_buffer_size%&#39;;</code></p><p>日志刷新到磁盘时机<code>show variables like &#39;%flush_log_at_trx_commit%&#39;;</code>，1表示日志在每次事务提交时写入并刷新到磁盘；0表示每秒写入并刷新到磁盘一次；2表示在每次事务提交后写入，每秒刷新到磁盘一次</p><h3 id="磁盘结构" tabindex="-1"><a class="header-anchor" href="#磁盘结构"><span>磁盘结构</span></a></h3><h4 id="_1-system-tablespace" tabindex="-1"><a class="header-anchor" href="#_1-system-tablespace"><span>1 System Tablespace</span></a></h4><p>系统表空间，更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建，它可能也包含表和索引数据</p><p>参数：innodb_date_file_path</p><h4 id="_2-file-per-table-tablespaces" tabindex="-1"><a class="header-anchor" href="#_2-file-per-table-tablespaces"><span>2 File-Per-Table Tablespaces</span></a></h4><p>每一张表自己的表空间，包含单个表的数据和索引</p><p>参数：innodb_file_per_table</p><p>默认打开</p><h4 id="_3-general-tablespaces" tabindex="-1"><a class="header-anchor" href="#_3-general-tablespaces"><span>3 General Tablespaces</span></a></h4><p>通用表空间，需要通过 <code>create tablespace</code> 创建</p><p>创建：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 创建表空间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> tablespace</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ts_it</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> datafile </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;it.ibd&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> engine </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> InnoDB;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 创建表，使用该表空间</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 先选择数据库建立表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> itcast;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> primary key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) engine </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> InnoDB tablespace ts_it; )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-undo-tablespaces" tabindex="-1"><a class="header-anchor" href="#_4-undo-tablespaces"><span>4 Undo Tablespaces</span></a></h4><p>撤销表空间，MySQL实例初始化时自动创建两个，用于存储 undo log 日志</p><h4 id="_5-temporary-tablespaces" tabindex="-1"><a class="header-anchor" href="#_5-temporary-tablespaces"><span>5 Temporary Tablespaces</span></a></h4><p>存储临时表等数据</p><h4 id="_6-doublewrite-buffer-files" tabindex="-1"><a class="header-anchor" href="#_6-doublewrite-buffer-files"><span>6 Doublewrite Buffer Files</span></a></h4><p>双写缓冲区，innodb引擎将数据页从缓冲池刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据</p><p>文件后缀：<code>.dblwr</code></p><h4 id="_7-redo-log" tabindex="-1"><a class="header-anchor" href="#_7-redo-log"><span>7 Redo Log</span></a></h4><p>重做日志，用来实现事务的持久性。</p><p>组成成分：重做日志缓冲（redo log buffer）；存在内存中、重做日志文件（redo log），存在磁盘中</p><p>作用：当事务提交后，会把修改信息存在该日志中，刷新脏页到磁盘中，发生错误时进行数据修复</p><p>循环方式写入重做日志文件，涉及两文件：</p><p><code>ib_logfile0</code>、<code>ib_logfile1</code></p><h3 id="后台线程" tabindex="-1"><a class="header-anchor" href="#后台线程"><span>后台线程</span></a></h3><p>作用：将缓冲池中数据在合适的时候刷新到磁盘中</p><h4 id="_1-master-thread" tabindex="-1"><a class="header-anchor" href="#_1-master-thread"><span>1 Master Thread</span></a></h4><p>核心，负责调度其他线程</p><p>负责将缓冲池中的数据异步刷新到磁盘中，保持数据一致性</p><p>负责脏页的刷新、合并插入缓存、undo页的回收</p><h4 id="_2-io-thread" tabindex="-1"><a class="header-anchor" href="#_2-io-thread"><span>2 IO Thread</span></a></h4><p>innodb大量使用AIO处理IO请求，IO Thread负责这些IO请求的回调</p><p>分为4类：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109152639237.png" alt="image-20230109152639237"></p><h4 id="_3-purge-thread" tabindex="-1"><a class="header-anchor" href="#_3-purge-thread"><span>3 Purge Thread</span></a></h4><p>回收事务已经提交的 undo log</p><h4 id="_4-page-cleaner-thread" tabindex="-1"><a class="header-anchor" href="#_4-page-cleaner-thread"><span>4 Page Cleaner Thread</span></a></h4><p>协助master刷新脏页到磁盘的线程，减少阻塞</p><h2 id="_3⃣️-事务原理" tabindex="-1"><a class="header-anchor" href="#_3⃣️-事务原理"><span>3⃣️ 事务原理</span></a></h2><p>原子性：undo log</p><p>持久性：redo log</p><p>一致性：undo log + redo log</p><p>隔离性：锁 + MVCC</p><blockquote><p>redo log：持久性</p><p>物理日志</p><p>undo log：原子性</p><p>提供回滚、MVCC（多版本并发控制）</p><p>逻辑日志</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221323881.png" alt="image-20230109221323881"></p><h2 id="_4⃣️-mvcc" tabindex="-1"><a class="header-anchor" href="#_4⃣️-mvcc"><span>4⃣️ MVCC</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><h4 id="_1-当前读" tabindex="-1"><a class="header-anchor" href="#_1-当前读"><span>1 当前读</span></a></h4><p>读取的是记录最新版本，加锁、其他并发事务不能修改当前记录</p><p>例子：加共享锁、update, insert, delete（排他锁）</p><h4 id="_2-快照读" tabindex="-1"><a class="header-anchor" href="#_2-快照读"><span>2 快照读</span></a></h4><p>读取记录的可见版本，有可能是历史数据，不加锁、非阻塞读</p><p>例子：不加锁的select</p><p><strong>在不同隔离级别下：</strong></p><ul><li>Read committed: 每次select都生成一个快照读</li><li>Repeatable Read: 开启事务后，第一个select语句是快照读的地方</li><li>Serializable: 快照读退化为当前读</li></ul><h4 id="_3-mvcc概念" tabindex="-1"><a class="header-anchor" href="#_3-mvcc概念"><span>3 MVCC概念</span></a></h4><p>Multi-Version Concurency Control 多版本并发控制</p><p>维护一个数据的多个版本，让读写操作没有冲突</p><p>具体实现依赖于数据库中三个隐式字段、undo log日志、readView</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h3><h4 id="_1-隐藏字段" tabindex="-1"><a class="header-anchor" href="#_1-隐藏字段"><span>1 隐藏字段</span></a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109185139464.png" alt="image-20230109185139464"></p><p>查看idb文件不能直接打开，要用</p><p><code>ibd2sdi ibd文件名称.ibd</code></p><h4 id="_2-undo-log日志" tabindex="-1"><a class="header-anchor" href="#_2-undo-log日志"><span>2 undo log日志</span></a></h4><p>在insert, update, delete时产生的便于数据回滚的日志</p><p>insert时，产生的undo log日志只在回滚时需要，事务提交后可被立即删除</p><p>update, delete时候，产生的日志不只是回滚需要、快照读也需要，不会被立即删除</p><p>相同或不同事务修改同一条记录——&gt; 记录的undo log生成一条记录版本的链表</p><p>链表头部时最新的旧记录、尾部是最早的旧记录</p><h4 id="_3-readview" tabindex="-1"><a class="header-anchor" href="#_3-readview"><span>3 readView</span></a></h4><p>读视图，快照读SQL执行时，MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交）的id</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109214719797.png" alt="image-20230109214719797"></p><blockquote><p>注意这个max_trx_id 是预分配事务ID</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215312471.png" alt="image-20230109215312471"></p><h5 id="在不同的隔离级别" tabindex="-1"><a class="header-anchor" href="#在不同的隔离级别"><span>在不同的隔离级别</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215352288.png" alt="image-20230109215352288"></p><p><strong>RC级别下：</strong></p><p>读已提交</p><p>在事务第一次执行快照读时生成ReadView</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109220703294.png" alt="image-20230109220703294"></p><p>每次ReadView返回的数据版本：套用版本链数据访问规则</p><p><strong>RR级别下：</strong></p><p>可重复读</p><p>在第一次快照读生成ReadView，后续复用</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221204835.png" alt="image-20230109221204835"></p>`,153)]))}const l=e(p,[["render",o]]),d=JSON.parse(`{"path":"/cs/database/mysql/%F0%9F%93%93%208%20InnoDB%E5%BC%95%E6%93%8E/1%20%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html","title":"InnoDB引擎","lang":"en-US","frontmatter":{"description":"InnoDB引擎 1⃣️ 逻辑存储结构 表空间：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引 段：数据段、索引段、回滚段 InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点 区：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页 页：磁盘管理的最小单元。为保持...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"InnoDB引擎\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109145424176.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109150050357.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109152639237.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221323881.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109185139464.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109214719797.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215312471.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215352288.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109220703294.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221204835.png\\"],\\"dateModified\\":\\"2023-04-09T08:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%208%20InnoDB%E5%BC%95%E6%93%8E/1%20%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"InnoDB引擎"}],["meta",{"property":"og:description","content":"InnoDB引擎 1⃣️ 逻辑存储结构 表空间：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引 段：数据段、索引段、回滚段 InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点 区：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页 页：磁盘管理的最小单元。为保持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109145424176.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-09T08:02:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-09T08:02:29.000Z"}]]},"git":{"createdTime":1673324155000,"updatedTime":1681027349000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":2,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":11.68,"words":3504},"filePathRelative":"cs/database/mysql/📓 8 InnoDB引擎/1 存储结构.md","excerpt":"\\n<h2>1⃣️ 逻辑存储结构</h2>\\n<p><strong>表空间</strong>：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引</p>\\n<p><strong>段</strong>：数据段、索引段、回滚段</p>\\n<blockquote>\\n<p>InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点</p>\\n</blockquote>\\n<p><strong>区</strong>：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页</p>\\n<p><strong>页</strong>：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区</p>","autoDesc":true}`);export{l as comp,d as data};
