import{_ as n,V as s,W as a,a0 as e}from"./framework-91a010c2.js";const p={},o=e(`<h1 id="使用规则" tabindex="-1"><a class="header-anchor" href="#使用规则" aria-hidden="true">#</a> 使用规则</h1><p>将错乱的表转化为行显示：<code>\\G</code></p><p>创建索引：<code>create idex idx_sku_sn on tb_sku(sn);</code></p><h4 id="最左前缀法则" tabindex="-1"><a class="header-anchor" href="#最左前缀法则" aria-hidden="true">#</a> 最左前缀法则</h4><p>主要针对联合索引（索引了多列）：从索引的最左列开始，并且不跳过中间的列</p><blockquote><p>最左边的一定要存在，后面的列不存在也可能走这个联合索引</p><p>如果中间的跳过了，索引会部分失效（索引长度变小）</p></blockquote><h4 id="范围查询" tabindex="-1"><a class="header-anchor" href="#范围查询" aria-hidden="true">#</a> 范围查询</h4><p>范围查询的字段的右边的列，索引失效</p><p><strong>用大于等于、小于等于</strong>，则不会</p><h4 id="几种索引失效情况" tabindex="-1"><a class="header-anchor" href="#几种索引失效情况" aria-hidden="true">#</a> 几种索引失效情况</h4><h5 id="_1⃣️-在索引列运算" tabindex="-1"><a class="header-anchor" href="#_1⃣️-在索引列运算" aria-hidden="true">#</a> 1⃣️ 在索引列运算</h5><p><code>select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;</code></p><p>对于11位的手机号、最后两位为15</p><h5 id="_2⃣️-字符串不加引号" tabindex="-1"><a class="header-anchor" href="#_2⃣️-字符串不加引号" aria-hidden="true">#</a> 2⃣️ 字符串不加引号</h5><p>字符串类型使用索引，不加引号就不会走索引</p><h5 id="_3⃣️-or连接的条件" tabindex="-1"><a class="header-anchor" href="#_3⃣️-or连接的条件" aria-hidden="true">#</a> 3⃣️ or连接的条件</h5><p>如果or前的条件的列有索引，<strong>后面没索引</strong>，那么涉及到的都不会用索引</p><h5 id="_4⃣️-数据分布影响" tabindex="-1"><a class="header-anchor" href="#_4⃣️-数据分布影响" aria-hidden="true">#</a> 4⃣️ 数据分布影响</h5><p>如果MySQ评估使用索引比全表扫描更慢，就不会使用索引</p><h4 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h4><p>头部模糊查询：可以</p><p><code>select * from tb_user where profession like &#39;信息%&#39;;</code></p><p>尾部模糊查询：失效</p><p><code>select * from tb_user where profession like &#39;%管理&#39;;</code></p><blockquote><p>前面不能加百分号</p></blockquote><h4 id="sql提示" tabindex="-1"><a class="header-anchor" href="#sql提示" aria-hidden="true">#</a> SQL提示</h4><p>优化数据库的重要手段</p><p>在sql语句中加入一些认为的提示来优化操作</p><blockquote><p>例如指定使用的查询</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- use index 建议这个索引:</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token comment">-- ignore index:</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token comment">-- force index 必须用这个index:</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引" aria-hidden="true">#</a> 覆盖索引</h4><p>尽量使用覆盖索引（查询使用了索引，并且<strong>需要返回的列</strong>，在该索引中能够全部找到）</p><p>减少 <code>select *</code>，因为很容易就会回表查询</p><p><code>using index condition </code>：查找使用了索引，但是需要回表查询</p><p><code>using where, using index </code>：查找使用了索引，但是需要的数据都在索引列中，不需要回表查询</p><p>问题：</p><p>优化<code>select id,username,password form tb_user where username = &#39;it&#39;</code></p><p>解答：</p><p>建立 username 和 password的联合索引，这样二级索引下面挂的就是id，直接覆盖索引，不需要回表查询</p><h4 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引" aria-hidden="true">#</a> 前缀索引</h4><p>当字段类型为字符串（varchar，text等），如果字符串很长，索引就会很大。查询时占用磁盘io，降低查询效率</p><p>可以将字符串的一部分前缀建立索引</p><p><code>create index idx_xxx on table_name(column(n));</code></p><p>n表示提取前几个字符</p><h5 id="前缀长度" tabindex="-1"><a class="header-anchor" href="#前缀长度" aria-hidden="true">#</a> 前缀长度</h5><p>根据索引的选择性决定：不重复的索引值（基数）和数据表的记录总数的比值</p><p>⬆️越高则查询效率越高</p><p>唯一索引的选择性是1，性能最好</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> email<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>

<span class="token comment">-- substring从第一个开始截取、前5个，分别看选择性</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> substring<span class="token punctuation">(</span>emai<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> form tb_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单列索引与联合索引" tabindex="-1"><a class="header-anchor" href="#单列索引与联合索引" aria-hidden="true">#</a> 单列索引与联合索引</h4><p>如果存在多个查询条件，建议联合索引</p>`,51),t=[o];function c(r,i){return s(),a("div",null,t)}const l=n(p,[["render",c],["__file","3.使用.html.vue"]]);export{l as default};
