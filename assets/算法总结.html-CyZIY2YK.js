import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,o as r}from"./app-fVbzsCFO.js";const a={};function p(i,t){return r(),n("div",null,t[0]||(t[0]=[e("h1",{id:"算法总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法总结"},[e("span",null,"算法总结")])],-1),e("h2",{id:"滑动窗口",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#滑动窗口"},[e("span",null,"滑动窗口")])],-1),e("p",null,"解决一类连续区间问题。它可以在$O(n)$的时间复杂度内解决很多需要遍历连续区间的问题，相比暴力枚举，具有更高的效率。",-1),e("p",null,"滑动窗口算法的基本思想是维护一个区间，在满足一定条件的前提下，尽可能地向右滑动这个区间。在每次滑动的过程中，都要更新区间内部的信息，并且根据需求更新问题的答案。当滑动到右边界不能继续向右移动时，算法结束。",-1),e("p",null,"滑动窗口算法的实现通常采用两个指针来维护区间，即一个左指针和一个右指针。初始时，两个指针都指向区间的左边界。然后，我们让右指针不断向右移动，直到区间不满足某些条件为止。在这个过程中，我们要不断更新区间内部的信息，并根据问题需求更新问题的答案。当右指针不能再向右移动时，我们让左指针向右移动一位，并重复上述过程。在每一轮滑动窗口时，我们都需要判断当前区间是否满足问题所要求的条件。",-1)]))}const m=o(a,[["render",p]]),s=JSON.parse(`{"path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.html","title":"算法总结","lang":"en-US","frontmatter":{"description":"算法总结 滑动窗口 解决一类连续区间问题。它可以在$O(n)$的时间复杂度内解决很多需要遍历连续区间的问题，相比暴力枚举，具有更高的效率。 滑动窗口算法的基本思想是维护一个区间，在满足一定条件的前提下，尽可能地向右滑动这个区间。在每次滑动的过程中，都要更新区间内部的信息，并且根据需求更新问题的答案。当滑动到右边界不能继续向右移动时，算法结束。 滑动窗口...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-06T12:54:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"算法总结"}],["meta",{"property":"og:description","content":"算法总结 滑动窗口 解决一类连续区间问题。它可以在$O(n)$的时间复杂度内解决很多需要遍历连续区间的问题，相比暴力枚举，具有更高的效率。 滑动窗口算法的基本思想是维护一个区间，在满足一定条件的前提下，尽可能地向右滑动这个区间。在每次滑动的过程中，都要更新区间内部的信息，并且根据需求更新问题的答案。当滑动到右边界不能继续向右移动时，算法结束。 滑动窗口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-03-06T12:54:44.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-06T12:54:44.000Z"}]]},"git":{"createdTime":1678107284000,"updatedTime":1678107284000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.09,"words":327},"filePathRelative":"algo/📓 总结/算法总结.md","excerpt":"\\n<h2>滑动窗口</h2>\\n<p>解决一类连续区间问题。它可以在$O(n)$的时间复杂度内解决很多需要遍历连续区间的问题，相比暴力枚举，具有更高的效率。</p>\\n<p>滑动窗口算法的基本思想是维护一个区间，在满足一定条件的前提下，尽可能地向右滑动这个区间。在每次滑动的过程中，都要更新区间内部的信息，并且根据需求更新问题的答案。当滑动到右边界不能继续向右移动时，算法结束。</p>\\n<p>滑动窗口算法的实现通常采用两个指针来维护区间，即一个左指针和一个右指针。初始时，两个指针都指向区间的左边界。然后，我们让右指针不断向右移动，直到区间不满足某些条件为止。在这个过程中，我们要不断更新区间内部的信息，并根据问题需求更新问题的答案。当右指针不能再向右移动时，我们让左指针向右移动一位，并重复上述过程。在每一轮滑动窗口时，我们都需要判断当前区间是否满足问题所要求的条件。</p>","autoDesc":true}`);export{m as comp,s as data};
