import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-fVbzsCFO.js";const n={};function h(p,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="二叉树基础" tabindex="-1"><a class="header-anchor" href="#二叉树基础"><span>二叉树基础</span></a></h1><h2 id="基本" tabindex="-1"><a class="header-anchor" href="#基本"><span>基本</span></a></h2><p>树里的每一个节点：一个值和一个包含所有子节点的列表。</p><p>从图的观点来看，树也可视为一个拥有<code>N 个节点</code>和<code>N-1 条边</code>的一个有向无环图。</p><h2 id="两种思维方式" tabindex="-1"><a class="header-anchor" href="#两种思维方式"><span>两种思维方式</span></a></h2><p><strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？</p><p>如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现，这叫「遍历」的思维模式。</p><p><strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？</p><p>如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。</p><p>都需要思考：</p><p><strong>如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做</strong>？</p><h2 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树"><span>二叉搜索树</span></a></h2><p>常见逻辑：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 找到目标，做点什么</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        BST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        BST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const k=i(n,[["render",h]]),d=JSON.parse(`{"path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/1%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80.html","title":"二叉树基础","lang":"en-US","frontmatter":{"description":"二叉树基础 基本 树里的每一个节点：一个值和一个包含所有子节点的列表。 从图的观点来看，树也可视为一个拥有N 个节点和N-1 条边的一个有向无环图。 两种思维方式 1、是否可以通过遍历一遍二叉树得到答案？ 如果可以，用一个 traverse 函数配合外部变量来实现，这叫「遍历」的思维模式。 2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉树基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-12T07:36:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/1%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"二叉树基础"}],["meta",{"property":"og:description","content":"二叉树基础 基本 树里的每一个节点：一个值和一个包含所有子节点的列表。 从图的观点来看，树也可视为一个拥有N 个节点和N-1 条边的一个有向无环图。 两种思维方式 1、是否可以通过遍历一遍二叉树得到答案？ 如果可以，用一个 traverse 函数配合外部变量来实现，这叫「遍历」的思维模式。 2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-02-12T07:36:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-12T07:36:31.000Z"}]]},"git":{"createdTime":1673581950000,"updatedTime":1676187391000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":4,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"algo/📓 总结/📒 二叉树/1 二叉树基础.md","excerpt":"\\n<h2>基本</h2>\\n<p>树里的每一个节点：一个值和一个包含所有子节点的列表。</p>\\n<p>从图的观点来看，树也可视为一个拥有<code>N 个节点</code>和<code>N-1 条边</code>的一个有向无环图。</p>\\n<h2>两种思维方式</h2>\\n<p><strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？</p>\\n<p>如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现，这叫「遍历」的思维模式。</p>\\n<p><strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？</p>","autoDesc":true}`);export{k as comp,d as data};
