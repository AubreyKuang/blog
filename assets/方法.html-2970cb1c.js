const n=JSON.parse(`{"key":"v-2ec2b4a4","path":"/algo/%F0%9F%93%93%20%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95.html","title":"方法","lang":"en-US","frontmatter":{"description":"方法 ArrayList set() get() StringBuilder append 把字符转化为小写 // lc125 public boolean isPalindrome(String s) { StringBuilder ans = new StringBuilder(); for (int i = 0; i &lt; s.length(); i++) { char c = s.charAt(i); if (Character.isLetterOrDigit(c)) { ans.append(Character.toLowerCase(c)); } } // 相向双指针 s = ans.toString(); int left = 0, right = s.length() - 1; while (left &lt; right) { if (s.charAt(left) != s.charAt(right)) { return false; } left++; right--; } return true; }","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/algo/%F0%9F%93%93%20%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"方法"}],["meta",{"property":"og:description","content":"方法 ArrayList set() get() StringBuilder append 把字符转化为小写 // lc125 public boolean isPalindrome(String s) { StringBuilder ans = new StringBuilder(); for (int i = 0; i &lt; s.length(); i++) { char c = s.charAt(i); if (Character.isLetterOrDigit(c)) { ans.append(Character.toLowerCase(c)); } } // 相向双指针 s = ans.toString(); int left = 0, right = s.length() - 1; while (left &lt; right) { if (s.charAt(left) != s.charAt(right)) { return false; } left++; right--; } return true; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-09T08:02:29.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-09T08:02:29.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/algo/%F0%9F%93%93%20%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95.html"}]]},"headers":[{"level":2,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":2,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]},{"level":2,"title":"字符串String","slug":"字符串string","link":"#字符串string","children":[]},{"level":2,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]},{"level":2,"title":"HashSet","slug":"hashset","link":"#hashset","children":[]},{"level":2,"title":"List","slug":"list","link":"#list","children":[]},{"level":2,"title":"Queue","slug":"queue","link":"#queue","children":[]},{"level":2,"title":"大小","slug":"大小","link":"#大小","children":[]}],"git":{"createdTime":1676187391000,"updatedTime":1681027349000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":8}]},"readingTime":{"minutes":0.55,"words":165},"localizedDate":"February 12, 2023","filePathRelative":"algo/📓 基础/方法.md","excerpt":"<h1> 方法</h1>\\n<h2> ArrayList</h2>\\n<p>set()</p>\\n<p>get()</p>\\n<h2> StringBuilder</h2>\\n<p>append</p>\\n<blockquote>\\n<p>把字符转化为小写</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// lc125</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isPalindrome</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> s<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">StringBuilder</span> ans <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">char</span> c <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Character</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isLetterOrDigit</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                ans<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Character</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 相向双指针</span>\\n        s <span class=\\"token operator\\">=</span> ans<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> left <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> right <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            right<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></blockquote>","autoDesc":true}`);export{n as data};
