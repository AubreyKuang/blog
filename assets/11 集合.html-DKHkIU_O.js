import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as t}from"./app-0rC9aSp6.js";const p={};function h(e,a){return t(),s("div",null,a[0]||(a[0]=[n(`<h1 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h1><h5 id="紧密结构-顺序结构" tabindex="-1"><a class="header-anchor" href="#紧密结构-顺序结构"><span>紧密结构（顺序结构）</span></a></h5><p>数组</p><h5 id="跳转结构-链式结构" tabindex="-1"><a class="header-anchor" href="#跳转结构-链式结构"><span>跳转结构（链式结构）</span></a></h5><p>链表</p><p>针对数组的缺点，引入集合</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-07-21 19.24.04.png" alt="截屏2022-07-21 19.24.04"></p><p>不同集合底层数据结构不一样</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220721210849434.png" alt="image-20220721210849434"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220721212737660.png" alt="image-20220721212737660"></p><p>接口不能创建对象，利用实现类创建对象</p><p>如：</p><h5 id="接口-实现类【写在方法里面】" tabindex="-1"><a class="header-anchor" href="#接口-实现类【写在方法里面】"><span>接口 = 实现类【写在方法里面】</span></a></h5><p><code>List list = new ArrayList();</code></p><p>拓展性好</p><p>集合只能存放引用数据类型的数据【但是可以放多种】，不能是基本数据类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//遍历collection接口两种方式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//1.增强for循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> o </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> col){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  sout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(o)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//2.迭代器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h4><p>不使用泛型的话，可能会在集合中错误录入不一样的数据类型</p><p>泛型相当于标签</p><p>泛型的类型都是引用数据类型</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220722173021918.png" alt="image-20220722173021918"></p><p>优点：编译时期就会对类型检查</p><h5 id="自定义泛型结构" tabindex="-1"><a class="header-anchor" href="#自定义泛型结构"><span>自定义泛型结构</span></a></h5><p>泛型类</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724121016131.png" alt=""></p><p>泛型类的静态方法，不能使用类的泛型</p><p>泛型接口</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724234518332.png" alt="image-20220724234518332"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724234752790.png" alt="image-20220724234752790"></p><h5 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-07-25 15.18.47.png" alt="截屏2022-07-25 15.18.47"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-07-25 15.24.53.png" alt="截屏2022-07-25 15.24.53"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220725152544679.png" alt="image-20220725152544679"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220725153707367.png" alt="image-20220725153707367"></p><h4 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-07-28 15.38.36.png" alt="截屏2022-07-28 15.38.36"></p><p>每一个元素都被封装成对象</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728225519042.png" alt="image-20220728225519042"></p><p>其中遍历方法迭代器：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728225808722.png" alt="image-20220728225808722"></p><h5 id="iterable接口-iterator-方法-返回值iterator" tabindex="-1"><a class="header-anchor" href="#iterable接口-iterator-方法-返回值iterator"><span>Iterable接口，iterator()方法，返回值Iterator</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728230323444.png" alt="image-20220728230323444"></p><h4 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset"><span>HashSet</span></a></h4><p>唯一、无序</p><p>但是自定义的类型并不满足唯一的特点</p><p>放入这个集合的数据对应的类，必须重写hashCode方法和quals方法</p><h5 id="实现类" tabindex="-1"><a class="header-anchor" href="#实现类"><span>实现类</span></a></h5><p>LinkedHashSet：在HashSet基础上，多了一个总的链表；将放入的元素串在一起，方便有序遍历</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220729184104064.png" alt="image-20220729184104064"></p><h4 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h4><p>LinkedHashMap按照输入的顺序输出</p>`,52)]))}const o=i(p,[["render",h]]),l=JSON.parse(`{"path":"/se/BackEnd/JavaSE/11%20%E9%9B%86%E5%90%88.html","title":"集合","lang":"en-US","frontmatter":{"description":"集合 紧密结构（顺序结构） 数组 跳转结构（链式结构） 链表 针对数组的缺点，引入集合 截屏2022-07-21 19.24.04 不同集合底层数据结构不一样 image-20220721210849434 image-20220721212737660 接口不能创建对象，利用实现类创建对象 如： 接口 = 实现类【写在方法里面】 List list ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/%E6%88%AA%E5%B1%8F2022-07-21%2019.24.04.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220721210849434.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220721212737660.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220722173021918.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724121016131.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724234518332.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220724234752790.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/%E6%88%AA%E5%B1%8F2022-07-25%2015.18.47.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/%E6%88%AA%E5%B1%8F2022-07-25%2015.24.53.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220725152544679.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220725153707367.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/%E6%88%AA%E5%B1%8F2022-07-28%2015.38.36.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728225519042.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728225808722.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220728230323444.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220729184104064.png\\"],\\"dateModified\\":\\"2023-01-10T04:15:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/BackEnd/JavaSE/11%20%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"集合"}],["meta",{"property":"og:description","content":"集合 紧密结构（顺序结构） 数组 跳转结构（链式结构） 链表 针对数组的缺点，引入集合 截屏2022-07-21 19.24.04 不同集合底层数据结构不一样 image-20220721210849434 image-20220721212737660 接口不能创建对象，利用实现类创建对象 如： 接口 = 实现类【写在方法里面】 List list ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/%E6%88%AA%E5%B1%8F2022-07-21%2019.24.04.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-10T04:15:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-10T04:15:55.000Z"}]]},"git":{"createdTime":1673324155000,"updatedTime":1673324155000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.77,"words":531},"filePathRelative":"se/BackEnd/JavaSE/11 集合.md","excerpt":"\\n<h5>紧密结构（顺序结构）</h5>\\n<p>数组</p>\\n<h5>跳转结构（链式结构）</h5>\\n<p>链表</p>\\n<p>针对数组的缺点，引入集合</p>\\n<p><img src=\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-07-21 19.24.04.png\\" alt=\\"截屏2022-07-21 19.24.04\\"></p>\\n<p>不同集合底层数据结构不一样</p>\\n<p><img src=\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220721210849434.png\\" alt=\\"image-20220721210849434\\"></p>","autoDesc":true}`);export{o as comp,l as data};
