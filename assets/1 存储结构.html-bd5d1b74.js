const e=JSON.parse(`{"key":"v-550dd762","path":"/cs/database/mysql/%F0%9F%93%93%208%20InnoDB%E5%BC%95%E6%93%8E/1%20%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html","title":"InnoDB引擎","lang":"en-US","frontmatter":{"description":"InnoDB引擎 1⃣️ 逻辑存储结构 表空间：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引 段：数据段、索引段、回滚段 InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点 区：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页 页：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%208%20InnoDB%E5%BC%95%E6%93%8E/1%20%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"InnoDB引擎"}],["meta",{"property":"og:description","content":"InnoDB引擎 1⃣️ 逻辑存储结构 表空间：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引 段：数据段、索引段、回滚段 InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点 区：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页 页：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-09T08:02:29.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-09T08:02:29.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/cs/database/mysql/%F0%9F%93%93%208%20InnoDB%E5%BC%95%E6%93%8E/1%20%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html"}]]},"headers":[{"level":2,"title":"1⃣️ 逻辑存储结构","slug":"_1⃣️-逻辑存储结构","link":"#_1⃣️-逻辑存储结构","children":[]},{"level":2,"title":"2⃣️ 架构","slug":"_2⃣️-架构","link":"#_2⃣️-架构","children":[{"level":3,"title":"内存架构","slug":"内存架构","link":"#内存架构","children":[]},{"level":3,"title":"磁盘结构","slug":"磁盘结构","link":"#磁盘结构","children":[]},{"level":3,"title":"后台线程","slug":"后台线程","link":"#后台线程","children":[]}]},{"level":2,"title":"3⃣️ 事务原理","slug":"_3⃣️-事务原理","link":"#_3⃣️-事务原理","children":[]},{"level":2,"title":"4⃣️ MVCC","slug":"_4⃣️-mvcc","link":"#_4⃣️-mvcc","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[]}]}],"git":{"createdTime":1681027349000,"updatedTime":1681027349000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":11.75,"words":3526},"localizedDate":"April 9, 2023","filePathRelative":"cs/database/mysql/📓 8 InnoDB引擎/1 存储结构.md","excerpt":"<h1> InnoDB引擎</h1>\\n<h2> 1⃣️ 逻辑存储结构</h2>\\n<p><strong>表空间</strong>：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引</p>\\n<p><strong>段</strong>：数据段、索引段、回滚段</p>\\n<blockquote>\\n<p>InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点</p>\\n</blockquote>\\n<p><strong>区</strong>：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页</p>\\n<p><strong>页</strong>：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区</p>","autoDesc":true}`);export{e as data};
