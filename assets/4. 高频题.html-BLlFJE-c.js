import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as p}from"./app-0rC9aSp6.js";const r={};function o(s,t){return p(),a("div",null,t[0]||(t[0]=[n('<h1 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题"><span>其他问题</span></a></h1><h2 id="_1⃣️-从数据页的角度看b-树" tabindex="-1"><a class="header-anchor" href="#_1⃣️-从数据页的角度看b-树"><span>1⃣️ 从数据页的角度看B+树</span></a></h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。</p><p>数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。</p><p>为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。</p><p>如果叶子节点存储的是实际数据的就是聚簇索引，一个表只能有一个聚簇索引；如果叶子节点存储的不是实际数据，而是主键值则就是二级索引，一个表中可以有多个二级索引。</p><p>在使用二级索引进行查找数据时，如果查询的数据能在二级索引找到，那么就是「索引覆盖」操作，如果查询的数据不在二级索引里，就需要先在二级索引找到主键值，需要去聚簇索引中获得数据行，这个过程就叫作「回表」。</p><h3 id="innodb存储数据" tabindex="-1"><a class="header-anchor" href="#innodb存储数据"><span>InnoDB存储数据</span></a></h3><p>记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。</p><p>因此，<strong>InnoDB 的数据是按「数据页」为单位来读写的</strong></p><p>采用链表的结构是让数据页之间不需要是物理上的连续的，而是逻辑上的连续。</p><p><strong>数据页中的记录按照「主键」顺序组成单向链表</strong></p><p>数据页中有一个<strong>页目录</strong>，起到记录的索引作用</p><p>地址偏移量也被称之为槽（slot），<strong>每个槽相当于指针指向了不同组的最后一个记录</strong>。</p><p><strong>页目录是由多个槽组成的，槽相当于分组记录的索引</strong>。然后，因为记录是按照「主键值」从小到大排序的，所以<strong>我们通过槽查找记录时，可以使用二分法快速定位要查询的记录在哪个槽（哪个记录分组），定位到槽后，再遍历槽内的所有记录，找到对应的记录</strong>，无需从最小记录开始遍历整个页中的记录链表。</p><h3 id="b-树如何查询" tabindex="-1"><a class="header-anchor" href="#b-树如何查询"><span>B+树如何查询</span></a></h3><p>需要存储大量的记录时，就需要多个数据页，这时我们就需要考虑如何建立合适的索引，才能方便定位记录所在的页。</p><p>InnoDB 里的 B+ 树中的<strong>每个节点都是一个数据页</strong></p><ul><li>只有叶子节点才存放了数据，非叶子节点仅用来存放目录项作为索引。</li><li>非叶子节点分为不同层次，通过分层来降低每一层的搜索量；</li><li>所有节点按照索引键大小排序，构成一个双向链表，便于范围查询；</li></ul><p>定位记录所在哪一个页时，也是通过二分法快速定位到包含该记录的页。定位到该页后，又会在该页内进行二分法快速定位记录所在的分组（槽号），最后在分组内进行遍历查找。</p><h3 id="聚集索引和二级索引" tabindex="-1"><a class="header-anchor" href="#聚集索引和二级索引"><span>聚集索引和二级索引</span></a></h3><ul><li><strong>聚簇索引的叶子节点存放的是实际数据</strong>，所有完整的用户记录都存放在聚簇索引的叶子节点；</li><li><strong>二级索引的叶子节点存放的是主键值</strong>，而不是实际数据。</li></ul><p><strong>如果某个查询语句使用了二级索引，但是查询的数据不是主键值，这时在二级索引找到主键值后，需要去聚簇索引中获得数据行，这个过程叫作回表。</strong></p><p><strong>当查询的数据是主键值时，因为只在二级索引就能查询到，不用再去聚簇索引查，这个过程就叫作「索引覆盖」</strong></p><h2 id="_2⃣️-为什么mysql用b-树作为索引" tabindex="-1"><a class="header-anchor" href="#_2⃣️-为什么mysql用b-树作为索引"><span>2⃣️ 为什么MySQL用B+树作为索引</span></a></h2><p>如果使用 B 树来做范围查询的话，需要使用中序遍历，这会涉及多个节点的磁盘 I/O 问题</p><p>B+ 树与 B 树差异的点，主要是以下这几点：</p><ul><li>叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引；</li><li>所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表；</li><li>非叶子节点的索引也会同时存在子节点中，并且是在子节点中所有索引的最大（或最小）。</li><li>非叶子节点中有多少个子节点，就有多少个索引；</li></ul><p>B+ 树在删除根节点的时候，由于存在冗余的节点，所以不会发生复杂的树的变形，而且 B+ 树会自动平衡</p><p><strong>B+ 树的插入和删除效率更高</strong>。</p><p><strong>B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助</strong></p><h2 id="_3⃣️-mysql单表不要超过两千万行" tabindex="-1"><a class="header-anchor" href="#_3⃣️-mysql单表不要超过两千万行"><span>3⃣️ MySQL单表不要超过两千万行？</span></a></h2><ul><li>MySQL 的表数据是以页的形式存放的，页在磁盘中不一定是连续的。</li><li>页的空间是 16K, 并不是所有的空间都是用来存放数据的，会有一些固定的信息，如，页头，页尾，页码，校验码等等。</li><li>在 B+ 树中，叶子节点和非叶子节点的数据结构是一样的，区别在于，叶子节点存放的是实际的行数据，而非叶子节点存放的是主键和页号。</li><li>索引结构不会影响单表最大行数，2000W 也只是推荐值，超过了这个值可能会导致 B + 树层级更高，影响查询性能。</li></ul><h2 id="_4⃣️-索引失效" tabindex="-1"><a class="header-anchor" href="#_4⃣️-索引失效"><span>4⃣️ 索引失效？</span></a></h2><p>索引的存储结构跟 MySQL 使用哪种存储引擎有关，因为存储引擎就是负责将数据持久化在磁盘中，而不同的存储引擎采用的索引数据结构也会不相同。</p><ol><li><h5 id="对索引使用左或者左右模糊匹配" tabindex="-1"><a class="header-anchor" href="#对索引使用左或者左右模糊匹配"><span>对索引使用左或者左右模糊匹配</span></a></h5><p><code>like %xx</code> 或者 <code>like %xx%</code></p><p>因为索引 B+ 树是按照「索引值」有序排列存储的，只能根据前缀进行比较。</p></li><li><h5 id="对索引用函数" tabindex="-1"><a class="header-anchor" href="#对索引用函数"><span>对索引用函数</span></a></h5><p>因为索引保存的是索引字段的原始值，而不是经过函数计算后的值</p><p>MySQL 8.0 开始，索引特性增加了函数索引，即可以针对函数计算后的值建立一个索引，也就是说该索引的值是函数计算后的值</p></li><li><h5 id="对索引进行表达式计算" tabindex="-1"><a class="header-anchor" href="#对索引进行表达式计算"><span>对索引进行表达式计算</span></a></h5><p>因为索引保存的是索引字段的原始值，而不是 id + 1 表达式计算后的值，所以无法走索引，只能<strong>通过把索引字段的取值都取出来，然后依次进行表达式的计算来进行条件判断，因此采用的就是全表扫描的方式。</strong></p></li><li><h5 id="对索引隐式类型转换" tabindex="-1"><a class="header-anchor" href="#对索引隐式类型转换"><span>对索引隐式类型转换</span></a></h5><table><thead><tr><th style="text-align:center;">索引</th><th style="text-align:center;">输入</th><th></th></tr></thead><tbody><tr><td style="text-align:center;">字符串</td><td style="text-align:center;">整型</td><td>❌</td></tr><tr><td style="text-align:center;">整型</td><td style="text-align:center;">字符串</td><td>✅</td></tr></tbody></table><p><strong>MySQL 在遇到字符串和数字比较的时候，会自动把字符串转为数字，然后再进行比较</strong>。</p><p>CAST函数，本质上是对输入/输出用函数，不能对索引用函数，所以1不行</p></li><li><h5 id="联合索引非最左匹配" tabindex="-1"><a class="header-anchor" href="#联合索引非最左匹配"><span>联合索引非最左匹配</span></a></h5><p>多个普通字段组合在一起创建的索引就叫做联合索引（组合索引）。</p><p>在联合索引的情况下，数据是按照索引第一列排序，第一列数据相同时才会按照第二列排序。</p><p>也就是说，如果我们想使用联合索引中尽可能多的列，查询条件中的各个列必须是联合索引中从最左边开始连续的列。如果我们仅仅按照第二列搜索，肯定无法走索引。</p></li><li><h5 id="where子句中的or" tabindex="-1"><a class="header-anchor" href="#where子句中的or"><span>where子句中的or</span></a></h5><p>如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</p></li></ol><h2 id="_5⃣️使用like-x-索引一定会失效吗" tabindex="-1"><a class="header-anchor" href="#_5⃣️使用like-x-索引一定会失效吗"><span>5⃣️使用like&quot;%x&quot;，索引一定会失效吗？</span></a></h2><h4 id="直接遍历二级索引树-✅-遍历聚簇索引树-❌" tabindex="-1"><a class="header-anchor" href="#直接遍历二级索引树-✅-遍历聚簇索引树-❌"><span>直接遍历二级索引树 ✅ 遍历聚簇索引树 ❌</span></a></h4><p>为二级索引树的记录东西很少，就只有「索引列+主键值」，而聚簇索引记录的东西会更多，比如聚簇索引中的叶子节点则记录了主键值、事务 id、用于事务和 MVCC 的回滚指针以及所有的剩余列。</p><p>左模糊匹配：无法利用索引树的有序性来快速定位数据</p><p>使用左模糊匹配（like &quot;%xx&quot;）并不一定会走全表扫描，关键还是看数据表中的字段。</p><p>如果数据库表中的字段只有<strong>主键+二级索引</strong>，那么即使使用了左模糊匹配，也不会走全表扫描（type=all），而是走全扫描二级索引树(type=index)。</p><h2 id="_6⃣️count-和count-1-的区别" tabindex="-1"><a class="header-anchor" href="#_6⃣️count-和count-1-的区别"><span>6⃣️count(*)和count(1)的区别？</span></a></h2><p>count(*) = count(1) &gt; count(主键字段) &gt; count(字段)</p><p>基于常用的innodb存储引擎：</p><p>count()是一个聚合函数，用于<strong>统计符合查询条件的记录中，函数指定的参数不为 NULL 的记录</strong>有多少个。</p><p>MySQL的server层维护一个名叫count的变量</p><p>有二级索引时，优先遍历二级索引而不是聚簇索引</p>',49)]))}const h=e(r,[["render",o]]),d=JSON.parse(`{"path":"/cs/database/mysql/%F0%9F%93%93%203%20%E7%B4%A2%E5%BC%95/4.%20%E9%AB%98%E9%A2%91%E9%A2%98.html","title":"其他问题","lang":"en-US","frontmatter":{"description":"其他问题 1⃣️ 从数据页的角度看B+树 总结 InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。 数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"其他问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-06T03:21:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%203%20%E7%B4%A2%E5%BC%95/4.%20%E9%AB%98%E9%A2%91%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"其他问题"}],["meta",{"property":"og:description","content":"其他问题 1⃣️ 从数据页的角度看B+树 总结 InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。 数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-06T03:21:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-06T03:21:04.000Z"}]]},"git":{"createdTime":1680751264000,"updatedTime":1680751264000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":8,"words":2400},"filePathRelative":"cs/database/mysql/📓 3 索引/4. 高频题.md","excerpt":"\\n<h2>1⃣️ 从数据页的角度看B+树</h2>\\n<h3>总结</h3>\\n<p>InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。</p>\\n<p>数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。</p>\\n<p>为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。</p>\\n<p>如果叶子节点存储的是实际数据的就是聚簇索引，一个表只能有一个聚簇索引；如果叶子节点存储的不是实际数据，而是主键值则就是二级索引，一个表中可以有多个二级索引。</p>","autoDesc":true}`);export{h as comp,d as data};
