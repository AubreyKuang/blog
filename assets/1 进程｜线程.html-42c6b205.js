const e=JSON.parse(`{"key":"v-2b2ef4ee","path":"/os/1%20%E8%BF%9B%E7%A8%8B%EF%BD%9C%E7%BA%BF%E7%A8%8B.html","title":"线程和进程","lang":"en-US","frontmatter":{"description":"线程和进程 进程是资源（包括内存、打开的文件等）分配的单位， 线程是 CPU 调度的单位； 在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈； 线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系； 线程更能减少开销，体现在时间效率，还是空间效率比进程都要高：","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/os/1%20%E8%BF%9B%E7%A8%8B%EF%BD%9C%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"线程和进程"}],["meta",{"property":"og:description","content":"线程和进程 进程是资源（包括内存、打开的文件等）分配的单位， 线程是 CPU 调度的单位； 在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈； 线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系； 线程更能减少开销，体现在时间效率，还是空间效率比进程都要高："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-26T09:43:18.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-26T09:43:18.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/os/1%20%E8%BF%9B%E7%A8%8B%EF%BD%9C%E7%BA%BF%E7%A8%8B.html"}]]},"headers":[{"level":2,"title":"进程","slug":"进程","link":"#进程","children":[{"level":3,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":3,"title":"控制结构 PCB","slug":"控制结构-pcb","link":"#控制结构-pcb","children":[]},{"level":3,"title":"控制过程","slug":"控制过程","link":"#控制过程","children":[]},{"level":3,"title":"进程上下文切换","slug":"进程上下文切换","link":"#进程上下文切换","children":[]}]},{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[{"level":3,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":3,"title":"用户线程","slug":"用户线程","link":"#用户线程","children":[]},{"level":3,"title":"内核线程","slug":"内核线程","link":"#内核线程","children":[]},{"level":3,"title":"线程上下文切换","slug":"线程上下文切换","link":"#线程上下文切换","children":[]}]},{"level":2,"title":"调度","slug":"调度","link":"#调度","children":[{"level":3,"title":"调度算法","slug":"调度算法","link":"#调度算法","children":[]}]},{"level":2,"title":"线程池的核心参数🌟","slug":"线程池的核心参数🌟","link":"#线程池的核心参数🌟","children":[{"level":3,"title":"拒绝策略","slug":"拒绝策略","link":"#拒绝策略","children":[]},{"level":3,"title":"sleep wait方法对比","slug":"sleep-wait方法对比","link":"#sleep-wait方法对比","children":[]},{"level":3,"title":"lock 和 synchronized 对比","slug":"lock-和-synchronized-对比","link":"#lock-和-synchronized-对比","children":[]},{"level":3,"title":"volatile能否保证线程安全","slug":"volatile能否保证线程安全","link":"#volatile能否保证线程安全","children":[]}]}],"git":{"createdTime":1682502198000,"updatedTime":1682502198000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":17.34,"words":5201},"localizedDate":"April 26, 2023","filePathRelative":"os/1 进程｜线程.md","excerpt":"<h1> 线程和进程</h1>\\n<p>进程是资源（包括内存、打开的文件等）分配的单位，</p>\\n<p>线程是 CPU 调度的单位；</p>\\n<p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p>\\n<ul>\\n<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li>\\n<li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li>\\n</ul>\\n<p><strong>线程更能减少开销</strong>，体现在时间效率，还是空间效率比进程都要高：</p>","autoDesc":true}`);export{e as data};
