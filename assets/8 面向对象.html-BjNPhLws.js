import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as n}from"./app-fVbzsCFO.js";const e={};function t(h,a){return n(),i("div",null,a[0]||(a[0]=[s(`<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h1><p>面向过程：考虑怎么做</p><p>面向对象：考虑谁来做，找参与者</p><p>对象：具体的实体</p><p>类：抽象的对象，一个模版</p><blockquote><p>一般先写类，然后再根据类创建对象</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220714150435178.png" alt="image-20220714150435178"></p><h5 id="面向对象三个阶段" tabindex="-1"><a class="header-anchor" href="#面向对象三个阶段"><span>面向对象三个阶段</span></a></h5><p><em>面向对象分析</em> OOA</p><p>类的动态特性（方法）</p><p>静态特性（属性）</p><p><em>设计</em> OOD</p><p><em>编程 OOP</em></p><p>局部变量一定要赋值</p><h4 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器"><span>构造器</span></a></h4><h5 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h5><p>第一次遇到类的时候，进行类的加载（只进行一次</p><p>创建对象，为这个对象在堆中开辟空间</p><p>进行对象属性初始化</p><p>new关键字实际上是在调用<strong>构造方法</strong>（构造器）</p><p>构造器没有方法的返回值类型</p><p>方法体内部不能</p><p>构造器的名字很特殊，必须和类名一样</p><blockquote><p>构造器的作用不是为了创建对象，在调用构造器之间，对象就已经创建好了</p><p>作用是给属性赋值【很好用，就能直接传参数】</p></blockquote><p>但是重载构造器后，系统就不会再分配空构造器</p><p>所以空构造器还得写</p><h5 id="⚠️-this关键字" tabindex="-1"><a class="header-anchor" href="#⚠️-this关键字"><span>⚠️ this关键字！！！</span></a></h5><p>this指的是正在创建的对象</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220713231301583.png" alt="image-20220713231301583"></p><p>可以修饰属性、方法、构造器</p><h4 id="static修饰" tabindex="-1"><a class="header-anchor" href="#static修饰"><span>static修饰</span></a></h4><p>修饰属性：</p><h4 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h4><p>属性、方法、构造器、代码块、内部类</p><h5 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h5><h5 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h5><p>名称全部小写</p><h4 id="三大特性" tabindex="-1"><a class="header-anchor" href="#三大特性"><span>三大特性</span></a></h4><h5 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h5><p>private</p><p>public</p><p>protected</p><p>![image-20220715154106771](/Users/apple/Library/Application Support/typora-user-images/image-20220715154106771.png)</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220715225026844.png" alt="image-20220715225026844"></p><p>属性、方法之前，四种都有</p><blockquote><p>一般属性：用private修饰</p><p>方法：用public修饰</p></blockquote><p>类前面，一般默认/public</p><h5 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h5><p>类是对对象的抽象</p><p><em>继承是对类的抽象</em> ➡️ 形成大类</p><p>extends</p><h5 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h5><h4 id="方法的重写" tabindex="-1"><a class="header-anchor" href="#方法的重写"><span>方法的重写</span></a></h4><h4 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220716112433435.png" alt="image-20220716112433435"></span></a></h4><p>子类对父类方法不满意</p><h5 id="要求" tabindex="-1"><a class="header-anchor" href="#要求"><span>要求：</span></a></h5><p>方法名一致、参数列表一致</p><p>父类的权限修饰符 开放等级 要更低</p><p>private &lt; default &lt; protected &lt; public</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220716114004152.png" alt="image-20220716114004152"></p><h5 id="找父类" tabindex="-1"><a class="header-anchor" href="#找父类"><span>找父类</span></a></h5><p>super.</p><p>可以修饰属性、方法</p><p>通常可以省略</p><p>但是当子类父类的属性、方法名称一样时，如果想要调用父类方法，就要加super</p><p>super调用父类构造器、this修饰子类构造器，只能同时存在</p><p>（要放第一行）</p><blockquote><p>所有对象默认 extends Object</p><p>print (s.toString())</p></blockquote><p><code>p1.equals(p2)</code></p><p>对于引用数据类型，还是比较地址值，没有实际意义。</p><p>所以一般子类都会重写</p><p><code> 对象 instanceof 类</code></p><p>判断对象是否为这个类的实例，返回布尔值</p><p>一个类可以作为另一个类的属性</p><h5 id="类和类之间的关系" tabindex="-1"><a class="header-anchor" href="#类和类之间的关系"><span>类和类之间的关系</span></a></h5><p>关联、组合、聚合</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123749687.png" alt="image-20230110123749687"></p><h4 id="多态-1" tabindex="-1"><a class="header-anchor" href="#多态-1"><span>多态</span></a></h4><p>指的是<strong>方法</strong>，而不是属性的多态</p><p>同一个方法，由于对象不同（不同的子类）表现不一样</p><p><code>an.shout()</code></p><p><code>pig.shout()</code></p><p>好处：提高代码的扩展性</p><p>面向对象的开闭原则：拓展是开放的，修改是关闭的</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719110731186.png" alt="image-20220719110731186"></p><p><strong>要素：</strong></p><ol><li><p><strong>继承关系</strong></p></li><li><p><strong>子类对父类重写</strong></p></li><li><p><strong>父类引用指向子类对象</strong></p></li></ol><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123818483.png" alt="image-20230110123818483" style="zoom:50%;"><p>➡️</p><p><code>Animai an = new Pig();</code></p><p>编译期 运行期</p><p><code>girl.play(an);</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> play</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> an){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  an</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>典型：父类是方法的形参，传入具体子类的对象</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220717213920018.png" alt="image-20220717213920018"></p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123839787.png" alt="image-20230110123839787" style="zoom:50%;"><p>向下转型（父类 -&gt; 子类</p><p>向上转型</p><h5 id="简单工厂设计模式" tabindex="-1"><a class="header-anchor" href="#简单工厂设计模式"><span>简单工厂设计模式</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718155230774.png" alt="image-20220718155230774"></p><blockquote><p>方法前加了static，就可以通过类名.方法名调用，否则要创建新对象才能用</p></blockquote><p>把父类当作方法返回值</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718154708610.png" alt="image-20220718154708610"></p><h5 id="final关键字" tabindex="-1"><a class="header-anchor" href="#final关键字"><span>final关键字</span></a></h5><p>final + 变量 =》变成字符常量，名字要大写</p><p>final + 引用数据类型 =〉 地址不改变，属性可以改变</p><p>final + 类 =》 表示没有子类，这个类不可以被继承</p><h5 id="抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象方法"><span>抽象方法</span></a></h5><p>子类永远要重写一个方法，父类的这个方法的方法体去掉，花括号改成分号；并且类也要改成抽象类</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718200302011.png" alt="image-20220718200302011"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719101539264.png" alt="image-20220719101539264"></p><p>如果没有重写全部的抽象方法，就要把子类变成抽象类</p><p>抽象类不能创建对象，但是抽象类的子类可以</p><p>抽象类的初衷：给子类继承用，所以不能被final修饰</p><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h4><p>和类同层次；接口中没有构造器</p><h5 id="jdk1-8前" tabindex="-1"><a class="header-anchor" href="#jdk1-8前"><span>jdk1.8前</span></a></h5><p>接口中只有 常量public static final、抽象方法 public abstract【默认的，可以不写】</p><p>类是来实现接口的 implements</p><p>实现类要重写接口中所有的抽象方法；如果没有重写全部，就要把类变成抽象类</p><p>继承是单继承，但是类可以实现多个接口</p><blockquote><p>因为接口没有方法体，不冲突</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719110647717.png" alt="image-20220719110647717"></p><h5 id="jdk1-8后" tabindex="-1"><a class="header-anchor" href="#jdk1-8后"><span>jdk1.8后</span></a></h5><p>新增非抽象方法</p><ol><li>被public default修饰</li></ol><p>接口中，default修饰符一定要写</p><p>实现类，如果像重写接口中的非抽象方法，一定不能加default</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719111246673.png" alt="image-20220719111246673"></p><p>实现类的调用</p><ol start="2"><li>静态方法</li></ol><p>public static</p><p>static只能找static的属性、方法【不能访问非静态的东西】</p><p>如果只能定义抽象方法，那么如果修改接口中的内容，所以实现类都会有影响</p><p>加入非抽象方法，对实现类没有影响</p><h4 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类"><span>内部类</span></a></h4><p>内部类可以访问外部类</p><p>外部类需要创建内部类的对象，才可以访问</p><h5 id="成员内部类" tabindex="-1"><a class="header-anchor" href="#成员内部类"><span>成员内部类</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719225627905.png" alt="image-20220719225627905"></p><p>属性、内部类外部类属性同名的时候，如何调用⬆️</p><h5 id="局部内部类" tabindex="-1"><a class="header-anchor" href="#局部内部类"><span>局部内部类</span></a></h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719230400325.png" alt="image-20220719230400325"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719230649068.png" alt="image-20220719230649068"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123946523.png" alt="image-20230110123946523"></p>`,145)]))}const o=p(e,[["render",t]]),l=JSON.parse(`{"path":"/se/BackEnd/JavaSE/8%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"面向对象","lang":"en-US","frontmatter":{"description":"面向对象 面向过程：考虑怎么做 面向对象：考虑谁来做，找参与者 对象：具体的实体 类：抽象的对象，一个模版 一般先写类，然后再根据类创建对象 image-20220714150435178 面向对象三个阶段 面向对象分析 OOA 类的动态特性（方法） 静态特性（属性） 设计 OOD 编程 OOP 局部变量一定要赋值 构造器 重载 第一次遇到类的时候，进...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220714150435178.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220713231301583.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220715154106771.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220715225026844.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220716112433435.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220716114004152.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123749687.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719110731186.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220717213920018.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718155230774.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718154708610.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220718200302011.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719101539264.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719110647717.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719111246673.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719225627905.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719230400325.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220719230649068.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123946523.png\\"],\\"dateModified\\":\\"2023-01-10T04:40:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/BackEnd/JavaSE/8%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象 面向过程：考虑怎么做 面向对象：考虑谁来做，找参与者 对象：具体的实体 类：抽象的对象，一个模版 一般先写类，然后再根据类创建对象 image-20220714150435178 面向对象三个阶段 面向对象分析 OOA 类的动态特性（方法） 静态特性（属性） 设计 OOD 编程 OOP 局部变量一定要赋值 构造器 重载 第一次遇到类的时候，进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220714150435178.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-10T04:40:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-10T04:40:48.000Z"}]]},"git":{"createdTime":1673324155000,"updatedTime":1673325648000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":2,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":4.85,"words":1454},"filePathRelative":"se/BackEnd/JavaSE/8 面向对象.md","excerpt":"\\n<p>面向过程：考虑怎么做</p>\\n<p>面向对象：考虑谁来做，找参与者</p>\\n<p>对象：具体的实体</p>\\n<p>类：抽象的对象，一个模版</p>\\n<blockquote>\\n<p>一般先写类，然后再根据类创建对象</p>\\n</blockquote>\\n<p><img src=\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220714150435178.png\\" alt=\\"image-20220714150435178\\"></p>\\n<h5>面向对象三个阶段</h5>\\n<p><em>面向对象分析</em> OOA</p>","autoDesc":true}`);export{o as comp,l as data};
