const e=JSON.parse(`{"key":"v-7130107d","path":"/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/%F0%9F%8C%9F%E9%9D%A2%E8%AF%95.html","title":"面试题","lang":"en-US","frontmatter":{"description":"面试题 反射 赋予了在运行时分析类以及执行类中方法的能力。 通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。 优缺点 优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。 不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。 应用 框架中大量使用了动态代理：动态代理的实现依赖反射。","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/%F0%9F%8C%9F%E9%9D%A2%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"面试题"}],["meta",{"property":"og:description","content":"面试题 反射 赋予了在运行时分析类以及执行类中方法的能力。 通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。 优缺点 优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。 不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。 应用 框架中大量使用了动态代理：动态代理的实现依赖反射。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-06T03:21:04.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-06T03:21:04.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/%F0%9F%8C%9F%E9%9D%A2%E8%AF%95.html"}]]},"headers":[{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"解析方法","slug":"解析方法","link":"#解析方法","children":[]}]},{"level":2,"title":"SPI","slug":"spi","link":"#spi","children":[{"level":3,"title":"与 API 的区别","slug":"与-api-的区别","link":"#与-api-的区别","children":[]}]}],"git":{"createdTime":1680751264000,"updatedTime":1680751264000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"localizedDate":"April 6, 2023","filePathRelative":"se/BackEnd/🌟 java集合/1 基础/🌟面试.md","excerpt":"<h1> 面试题</h1>\\n<h2> 反射</h2>\\n<p>赋予了在运行时分析类以及执行类中方法的能力。</p>\\n<p>通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。</p>\\n<h3> 优缺点</h3>\\n<p>优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p>\\n<p>不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。</p>\\n<h3> 应用</h3>\\n<p><strong>框架中大量使用了动态代理：动态代理的实现依赖反射。</strong></p>","autoDesc":true}`);export{e as data};
