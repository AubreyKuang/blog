const e=JSON.parse(`{"key":"v-59872378","path":"/cs/database/mysql/%F0%9F%93%93%203%20%E7%B4%A2%E5%BC%95/4.%20%E9%AB%98%E9%A2%91%E9%A2%98.html","title":"其他问题","lang":"en-US","frontmatter":{"description":"其他问题 1⃣️ 从数据页的角度看B+树 总结 InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。 数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。 为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%203%20%E7%B4%A2%E5%BC%95/4.%20%E9%AB%98%E9%A2%91%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"其他问题"}],["meta",{"property":"og:description","content":"其他问题 1⃣️ 从数据页的角度看B+树 总结 InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。 数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。 为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-06T03:21:04.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-06T03:21:04.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/cs/database/mysql/%F0%9F%93%93%203%20%E7%B4%A2%E5%BC%95/4.%20%E9%AB%98%E9%A2%91%E9%A2%98.html"}]]},"headers":[{"level":2,"title":"1⃣️ 从数据页的角度看B+树","slug":"_1⃣️-从数据页的角度看b-树","link":"#_1⃣️-从数据页的角度看b-树","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"InnoDB存储数据","slug":"innodb存储数据","link":"#innodb存储数据","children":[]},{"level":3,"title":"B+树如何查询","slug":"b-树如何查询","link":"#b-树如何查询","children":[]},{"level":3,"title":"聚集索引和二级索引","slug":"聚集索引和二级索引","link":"#聚集索引和二级索引","children":[]}]},{"level":2,"title":"2⃣️ 为什么MySQL用B+树作为索引","slug":"_2⃣️-为什么mysql用b-树作为索引","link":"#_2⃣️-为什么mysql用b-树作为索引","children":[]},{"level":2,"title":"3⃣️ MySQL单表不要超过两千万行？","slug":"_3⃣️-mysql单表不要超过两千万行","link":"#_3⃣️-mysql单表不要超过两千万行","children":[]},{"level":2,"title":"4⃣️ 索引失效？","slug":"_4⃣️-索引失效","link":"#_4⃣️-索引失效","children":[]},{"level":2,"title":"5⃣️使用like\\"%x\\"，索引一定会失效吗？","slug":"_5⃣️使用like-x-索引一定会失效吗","link":"#_5⃣️使用like-x-索引一定会失效吗","children":[]},{"level":2,"title":"6⃣️count(*)和count(1)的区别？","slug":"_6⃣️count-和count-1-的区别","link":"#_6⃣️count-和count-1-的区别","children":[]}],"git":{"createdTime":1680751264000,"updatedTime":1680751264000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":8,"words":2401},"localizedDate":"April 6, 2023","filePathRelative":"cs/database/mysql/📓 3 索引/4. 高频题.md","excerpt":"<h1> 其他问题</h1>\\n<h2> 1⃣️ 从数据页的角度看B+树</h2>\\n<h3> 总结</h3>\\n<p>InnoDB 的数据是按「数据页」为单位来读写的，默认数据页大小为 16 KB。每个数据页之间通过双向链表的形式组织起来，物理上不连续，但是逻辑上连续。</p>\\n<p>数据页内包含用户记录，每个记录之间用单向链表的方式组织起来，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。</p>\\n<p>为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。</p>","autoDesc":true}`);export{e as data};
