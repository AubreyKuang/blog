const n=JSON.parse(`{"key":"v-c7de1e08","path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E9%93%BE%E8%A1%A8/3.k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html","title":"K个一组反转链表","lang":"en-US","frontmatter":{"description":"K个一组反转链表 // 反转以 a 为头结点的链表 ListNode reverse(ListNode a){ ListNode pre, cur, nxt; pre = null; cur = a; nxt = a; while (cur != null){ nxt = cur.next; cur.next = pre; pre = cur; cur = nxt; } //反转后的头节点 return pre; } /** 反转区间 [a, b) 的元素，注意是左闭右开 */ ListNode reverse(ListNode a, ListNode b) { ListNode pre, cur, nxt; pre = null; cur = a; nxt = a; //注意不要把 cur 写成 a while (cur != b){ nxt = cur.next; cur.next = pre; pre = cur; cur = nxt; } return pre; } ListNode reverseKGroup(ListNode head, int k) { if (head == null) return null; // 区间[a, b)包含k个待反转元素 ListNode a, b; a = b = head; for (int i = 0; i &lt; k; i++){ if (b == null) return head; b = b.next } ListNode newHead = reverse(a, b); a.next = reverseKGroup(b, k); return newHead; }","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E9%93%BE%E8%A1%A8/3.k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"K个一组反转链表"}],["meta",{"property":"og:description","content":"K个一组反转链表 // 反转以 a 为头结点的链表 ListNode reverse(ListNode a){ ListNode pre, cur, nxt; pre = null; cur = a; nxt = a; while (cur != null){ nxt = cur.next; cur.next = pre; pre = cur; cur = nxt; } //反转后的头节点 return pre; } /** 反转区间 [a, b) 的元素，注意是左闭右开 */ ListNode reverse(ListNode a, ListNode b) { ListNode pre, cur, nxt; pre = null; cur = a; nxt = a; //注意不要把 cur 写成 a while (cur != b){ nxt = cur.next; cur.next = pre; pre = cur; cur = nxt; } return pre; } ListNode reverseKGroup(ListNode head, int k) { if (head == null) return null; // 区间[a, b)包含k个待反转元素 ListNode a, b; a = b = head; for (int i = 0; i &lt; k; i++){ if (b == null) return head; b = b.next } ListNode newHead = reverse(a, b); a.next = reverseKGroup(b, k); return newHead; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-08T14:46:46.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-08T14:46:46.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E9%93%BE%E8%A1%A8/3.k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html"}]]},"headers":[],"git":{"createdTime":1673067544000,"updatedTime":1673189206000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":2}]},"readingTime":{"minutes":0.54,"words":163},"localizedDate":"January 7, 2023","filePathRelative":"algo/📓 总结/📒 链表/3.k个一组反转链表.md","excerpt":"<h1> K个一组反转链表</h1>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 反转以 a 为头结点的链表</span>\\n<span class=\\"token class-name\\">ListNode</span> <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">ListNode</span> pre<span class=\\"token punctuation\\">,</span> cur<span class=\\"token punctuation\\">,</span> nxt<span class=\\"token punctuation\\">;</span>\\n  pre <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> cur <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span> nxt <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>cur <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    nxt <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n    cur<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> pre<span class=\\"token punctuation\\">;</span>\\n    pre <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">;</span>\\n    cur <span class=\\"token operator\\">=</span> nxt<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">//反转后的头节点</span>\\n  <span class=\\"token keyword\\">return</span> pre<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token doc-comment comment\\">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span>\\n<span class=\\"token class-name\\">ListNode</span> <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ListNode</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">ListNode</span> pre<span class=\\"token punctuation\\">,</span> cur<span class=\\"token punctuation\\">,</span> nxt<span class=\\"token punctuation\\">;</span>\\n  pre <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> cur <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span> nxt <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span>\\n  \\n  <span class=\\"token comment\\">//注意不要把 cur 写成 a</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>cur <span class=\\"token operator\\">!=</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    nxt <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n    cur<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> pre<span class=\\"token punctuation\\">;</span>\\n    pre <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">;</span>\\n    cur <span class=\\"token operator\\">=</span> nxt<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> pre<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token class-name\\">ListNode</span> <span class=\\"token function\\">reverseKGroup</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span> head<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> k<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>head <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  \\n  <span class=\\"token comment\\">// 区间[a, b)包含k个待反转元素</span>\\n  <span class=\\"token class-name\\">ListNode</span> a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">;</span>\\n  a <span class=\\"token operator\\">=</span> b <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> k<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>b <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> head<span class=\\"token punctuation\\">;</span>\\n    b <span class=\\"token operator\\">=</span> b<span class=\\"token punctuation\\">.</span>next\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token class-name\\">ListNode</span> newHead <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  a<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reverseKGroup</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">,</span> k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> newHead<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
