import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as n}from"./app-fVbzsCFO.js";const r={};function p(o,e){return n(),i("div",null,e[0]||(e[0]=[a('<h1 id="计算机体系结构" tabindex="-1"><a class="header-anchor" href="#计算机体系结构"><span>计算机体系结构</span></a></h1><p>网络模型</p><p><img src="https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220052186.png" alt="image-20230414220052186"></p><h2 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输"><span>数据传输</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220145733.png" alt="image-20230414220145733"></p><p>假设一个主机上的一个应用向另一个主机的一个应用发送数据：</p><ol><li>在发送主机端，一个应用层报文被传送到传输层。在最简单的情况下，传输层收取到报文并附上附加信息，该首部将被接收端的传输层使用。</li><li>应用层报文和传输层首部信息一道构成了传输层报文段。附加的信息可能包括：允许接收端传输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变。</li><li>传输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报文。</li><li>该数据报文接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧。</li><li>在物理层数据帧被封装成比特流，之后通过传输介质传送到对端。而在接收主机端，整个过程正好反过来。</li></ol><h2 id="网页解析" tabindex="-1"><a class="header-anchor" href="#网页解析"><span>网页解析</span></a></h2><p>应用层和传输层部分，用户输入网址后：</p><ol><li>dns 解析：访问一个网站时，浏览器获得一个域名，通过 dns 服务将域名解析为 ip 地址。</li><li>tcp 连接：向 Web 服务器发起 tcp 连接请求。</li><li>发送 http 请求：浏览器向 Web 服务器发起一个 http 请求，http 协议是建立在 tcp 协议之上的应用层协议，其本质是在建立起的 tcp连接中，按照 http 协议标准发送一个索要网页的请求。</li><li>处理请求并返回：服务器获取到客户端的 http 请求后，会根据 http 请求中的内容来决定如何获取相应的文件，并将文件发送给浏览器。</li><li>浏览器渲染：浏览器根据响应开始显示页面，首先解析 html 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。</li><li>断开连接：客户端和服务器断开连接。</li></ol>',10)]))}const s=t(r,[["render",p]]),m=JSON.parse(`{"path":"/cs/network/1%20%E5%9F%BA%E7%A1%80.html","title":"计算机体系结构","lang":"en-US","frontmatter":{"description":"计算机体系结构 网络模型 image-20230414220052186 数据传输 image-20230414220145733 假设一个主机上的一个应用向另一个主机的一个应用发送数据： 在发送主机端，一个应用层报文被传送到传输层。在最简单的情况下，传输层收取到报文并附上附加信息，该首部将被接收端的传输层使用。 应用层报文和传输层首部信息一道构成了传...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机体系结构\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220052186.png\\",\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220145733.png\\"],\\"dateModified\\":\\"2025-08-18T03:49:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/network/1%20%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"计算机体系结构"}],["meta",{"property":"og:description","content":"计算机体系结构 网络模型 image-20230414220052186 数据传输 image-20230414220145733 假设一个主机上的一个应用向另一个主机的一个应用发送数据： 在发送主机端，一个应用层报文被传送到传输层。在最简单的情况下，传输层收取到报文并附上附加信息，该首部将被接收端的传输层使用。 应用层报文和传输层首部信息一道构成了传..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220052186.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-08-18T03:49:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T03:49:31.000Z"}]]},"git":{"createdTime":1682502198000,"updatedTime":1755488971000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"},{"name":"kory","username":"kory","email":"apple@kuangyongbeideMacBook-Air.local","commits":1,"url":"https://github.com/kory"}]},"readingTime":{"minutes":2.09,"words":626},"filePathRelative":"cs/network/1 基础.md","excerpt":"\\n<p>网络模型</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220052186.png\\" alt=\\"image-20230414220052186\\"></p>\\n<h2>数据传输</h2>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/AubreyKuang/pictures@main/blog/image-20230414220145733.png\\" alt=\\"image-20230414220145733\\"></p>\\n<p>假设一个主机上的一个应用向另一个主机的一个应用发送数据：</p>","autoDesc":true}`);export{s as comp,m as data};
