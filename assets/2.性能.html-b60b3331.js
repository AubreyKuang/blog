import{_ as s,V as n,W as e,a1 as a}from"./framework-a2b1dd72.js";const l={},p=a(`<h1 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析" aria-hidden="true">#</a> 性能分析</h1><p>主要是优化查询语句（主要是索引的优化）</p><h4 id="sql执行频率" tabindex="-1"><a class="header-anchor" href="#sql执行频率" aria-hidden="true">#</a> SQL执行频率</h4><p>以插入/删除/修改/查询为主？</p><p>增删改查的访问频次：</p><p><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code></p><blockquote><p>7个短下划线</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104202956896.png" alt="image-20230104202956896" loading="lazy"></p><h4 id="慢查询日志" tabindex="-1"><a class="header-anchor" href="#慢查询日志" aria-hidden="true">#</a> 慢查询日志</h4><p>记录所有执行时间超过指定参数<code>(long_query_time)</code>的所有sql语句的日志</p><p>MySQL的慢查询日志默认开启</p><p>查看数据库慢查询配置：<code>show variables like &#39;slow_query_log&#39;</code></p><p>如果没有开启，需要在配置文件<code>/etc/my.cnf</code>中：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#开启MySQL慢日志查询开关</span>
slow_query_log <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">#设置慢查询时间，默认为10s</span>
long_query_time <span class="token operator">=</span> <span class="token number">2</span>

<span class="token comment">#重启</span>
systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="show-profiles" tabindex="-1"><a class="header-anchor" href="#show-profiles" aria-hidden="true">#</a> Show profiles</h4><p>做sql优化时，帮助我们了解时间耗费到哪</p><p>通过<code>SELECT @@have_profiling;</code>看是否支持</p><p>默认时关闭的，需要<code>SET profiling = 1;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 不同语句的耗费时间</span>
<span class="token keyword">show</span> profiles<span class="token punctuation">;</span>

<span class="token comment">-- 查询指定query_id的SQL语句各个阶段的耗时</span>
<span class="token keyword">show</span> profile <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span>

<span class="token comment">-- 不同语句的耗费时间</span>
<span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="explain" tabindex="-1"><a class="header-anchor" href="#explain" aria-hidden="true">#</a> explain</h4><p>不只是看执行时间，可以看到如何执行SELECT语句的信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 在sql查询语句前加上关键字explain/desc</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="结果-explain执行计划" tabindex="-1"><a class="header-anchor" href="#结果-explain执行计划" aria-hidden="true">#</a> 结果：explain执行计划</h5><ul><li><p>id ：查询的序列号，执行的顺序或是操作表的顺序</p><p><strong>⚠️id越大越先执行，id相同则从上到下执行</strong></p></li><li><p><strong>Type</strong>：连接类型，性能有好到差的连接类型为 NULL, system, const, eq_ref, ref, range, index, all</p><blockquote><p>优化的时候，尽量往前优化</p><p>不访问任何表才有可能NULL</p><p>index表示用了索引，但是对索引全部扫描</p><p>all代表全表扫描，性能低</p></blockquote></li><li><p>**Possible_key：**可能用在这张表上的索引</p></li><li><p>**key：**实际用的索引</p></li><li><p>**Key_len：**索引中使用的字节数，为索引字段的最大可能长度，不是实际使用长度；不损失精确性的前提下，长度越短越好</p></li><li><p>Rows：执行查询的行数</p><blockquote><p>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不准确</p></blockquote></li><li><p>Filters：表示返回结果的行占需要读取行的百分比，这个数值越大越好</p></li><li><p>extra：额外进行的</p></li><li><p>Select_type：查询类型，SIMPLE、SUB等</p></li></ul><p>例子：查选修了mysql课程的学生</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id <span class="token keyword">from</span> course c <span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 3</span>

<span class="token keyword">select</span> studentid <span class="token keyword">from</span> student_course sc <span class="token keyword">where</span> sc<span class="token punctuation">.</span>couseid <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">-- studentid</span>
<span class="token comment">-- 1</span>
<span class="token comment">-- 2</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过嵌套合并成一条</p><p>在前面加 <code>explain</code></p>`,28),i=[p];function o(c,d){return n(),e("div",null,i)}const r=s(l,[["render",o],["__file","2.性能.html.vue"]]);export{r as default};
