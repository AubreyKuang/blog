import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-fVbzsCFO.js";const e={};function p(l,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h4 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h4><p>软件设计中常见问题的解决方案模型（23种）</p><ul><li>历史经验的总结</li><li>不是具象的，与特定语言无关</li></ul><h4 id="三种类型" tabindex="-1"><a class="header-anchor" href="#三种类型"><span>三种类型</span></a></h4><ul><li>创建型 - 创建对象</li><li>结构型 - 组装对象成更大的结构</li><li>行为型 - 对象间的通信、职能划分</li></ul><hr><h4 id="浏览器中api的设计模式" tabindex="-1"><a class="header-anchor" href="#浏览器中api的设计模式"><span>浏览器中api的设计模式</span></a></h4><p><strong>单例模式</strong></p><p>全局唯一访问对象，在任意地方访问和修改都会反映在这个对象上。</p><p><em>应用：请求缓存、全局状态管理</em></p><p>请求缓存：发送相同的url请求，希望第二次发送请求的时候可以复用之前的一些值。</p><p><strong>发布订阅模式（观察者模式）</strong></p><p>订阅对象变化时，通知订阅者</p><p>定义一个User类， 构造器中初始状态置为离线，拥有一个followers对象数组，包括了该用户订阅的所有{用户，调用函数}。</p><p>每次在该用户上线时，遍历其followers进行通知。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727143124758.png" alt="image-20220727143124758"></p><p>函数作为参数传入</p><p><em>应用：邮件订阅、上线订阅</em></p><hr><h4 id="javascript中的设计模式" tabindex="-1"><a class="header-anchor" href="#javascript中的设计模式"><span>JavaScript中的设计模式</span></a></h4><p>js可以提供api，从而实现的模式</p><p><strong>原型模式</strong></p><p>复制已有对象，创建新的对象</p><p>js中对象创建的基本模式</p><p><em>应用：创建上线订阅中的用户</em></p><p><strong>代理模式</strong></p><p>自定义控制对原对象的访问方式</p><p><em>应用：监控、代理工具、前端框架实现</em></p><p><strong>迭代器模式</strong></p><p>在不暴露数据类型的情况下，访问集合中的数据</p><p>用到了Symbol.iterator 该迭代器可以被 <code>for...of</code> 循环使用。</p><p><em>应用：对多种数据类型列表、树等，提供通用操作接口</em></p><hr><h4 id="前端框架中的设计模式" tabindex="-1"><a class="header-anchor" href="#前端框架中的设计模式"><span>前端框架中的设计模式</span></a></h4><p><strong>代理模式</strong></p><p>前端框架对DOM的代理，通过其提供的钩子可以在更新前后进行操作.</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727150850014.png" alt="image-20220727150850014"></p><p><strong>组合模式</strong></p><p>可多个对象组合使用（组件结构），也可以单个对象独立使用</p><p><em>应用：DOM、前端组件、文件目录、部门</em></p><p>以React组件结构中国，计数器为例</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    count is </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于中这个Count组件，渲染在App中的组合结构：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  	&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;App&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  		&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  		&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  		&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Footer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const r=s(e,[["render",p]]),d=JSON.parse(`{"path":"/se/FrontEnd/2022%E9%9D%92%E8%AE%AD%E8%90%A5/4%20%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{"description":"设计模式 软件设计中常见问题的解决方案模型（23种） 历史经验的总结 不是具象的，与特定语言无关 三种类型 创建型 - 创建对象 结构型 - 组装对象成更大的结构 行为型 - 对象间的通信、职能划分 浏览器中api的设计模式 单例模式 全局唯一访问对象，在任意地方访问和修改都会反映在这个对象上。 应用：请求缓存、全局状态管理 请求缓存：发送相同的url...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727143124758.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727150850014.png\\"],\\"dateModified\\":\\"2023-01-08T14:46:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/FrontEnd/2022%E9%9D%92%E8%AE%AD%E8%90%A5/4%20%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:description","content":"设计模式 软件设计中常见问题的解决方案模型（23种） 历史经验的总结 不是具象的，与特定语言无关 三种类型 创建型 - 创建对象 结构型 - 组装对象成更大的结构 行为型 - 对象间的通信、职能划分 浏览器中api的设计模式 单例模式 全局唯一访问对象，在任意地方访问和修改都会反映在这个对象上。 应用：请求缓存、全局状态管理 请求缓存：发送相同的url..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727143124758.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-08T14:46:46.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-08T14:46:46.000Z"}]]},"git":{"createdTime":1673189206000,"updatedTime":1673189206000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.95,"words":586},"filePathRelative":"se/FrontEnd/2022青训营/4 前端设计模式.md","excerpt":"<h4>设计模式</h4>\\n<p>软件设计中常见问题的解决方案模型（23种）</p>\\n<ul>\\n<li>历史经验的总结</li>\\n<li>不是具象的，与特定语言无关</li>\\n</ul>\\n<h4>三种类型</h4>\\n<ul>\\n<li>创建型 - 创建对象</li>\\n<li>结构型 - 组装对象成更大的结构</li>\\n<li>行为型 - 对象间的通信、职能划分</li>\\n</ul>\\n<hr>\\n<h4>浏览器中api的设计模式</h4>\\n<p><strong>单例模式</strong></p>\\n<p>全局唯一访问对象，在任意地方访问和修改都会反映在这个对象上。</p>\\n<p><em>应用：请求缓存、全局状态管理</em></p>","autoDesc":true}`);export{r as comp,d as data};
