import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as r,o as t}from"./app-0rC9aSp6.js";const i={};function o(n,p){return t(),e("div",null,p[0]||(p[0]=[r('<h4 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h4><p>Importance: 市场占有率、重要性、java开发者写程序必备技能</p><p>基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置</p><p>目的：</p><h5 id="简化spring应用的初始搭建、开发过程" tabindex="-1"><a class="header-anchor" href="#简化spring应用的初始搭建、开发过程"><span>简化spring应用的初始搭建、开发过程</span></a></h5><p>特点：</p><p>1：创建独立的spring应用。 2：嵌入Tomcat, Jetty Undertow 而且不需要部署。 3：提供的“starters” poms来简化Maven配置 4：尽可能自动配置spring应用。 5：提供生产指标,健壮检查和外部化配置 6：没有代码生成和XML配置要求</p><p>优点：</p><p>简化依赖配置</p><p>简化常用工程相关配置</p><p>辅助功能（内置服务器等）</p><blockquote><p>企业中目前使用java8更多</p></blockquote><h4 id="入门案例解析" tabindex="-1"><a class="header-anchor" href="#入门案例解析"><span>入门案例解析</span></a></h4><h5 id="parent" tabindex="-1"><a class="header-anchor" href="#parent"><span>parent</span></a></h5><p>所有要继承的项目，定义了坐标版本号，减少依赖冲突</p><ol><li>定义一系列的常用坐标版本</li><li>定义一系列的常用坐标组合</li><li>直接使用组合（↑自己做好了）</li></ol><blockquote><p>继承了spring-boot-starter-parent，这个又继承了dependencies，里面定义了properties等属性、坐标</p><p>继承parent模块可以避免多个依赖相同技术时，出现依赖版本冲突</p><p>也可以不继承parent，而采取引入依赖的形式</p><p>不同版本间存在诸多坐标版本不同</p></blockquote><h5 id="starter" tabindex="-1"><a class="header-anchor" href="#starter"><span>starter</span></a></h5><p>包含了若干个pom定义的坐标管理器</p><p>定义了当前项目使用的所有依赖坐标，以减少依赖配置</p><blockquote><p>实际开发中</p><p>使用任意坐标时，仅书写GAV中的G，A。V由SpringBoot提供，除非没有提供对应版本V</p><p>如果发生坐标错误，再指定version（要小心版本冲突）</p></blockquote><h5 id="引导类" tabindex="-1"><a class="header-anchor" href="#引导类"><span>引导类</span></a></h5><p>![image-20220226215552984](/Users/apple/Library/Application Support/typora-user-images/image-20220226215552984.png)</p><h5 id="内嵌tomcat" tabindex="-1"><a class="header-anchor" href="#内嵌tomcat"><span>内嵌tomcat</span></a></h5><p>把服务器作为对象运行，并将其交给spring容器管理</p><p>Boot-starter-web导入了一个坐标，在spring容器中运行起来（由tomcat-embed-core核心包运行）</p><p>![image-20220227123556529](/Users/apple/Library/Application Support/typora-user-images/image-20220227123556529.png)</p><p>![image-20220227124024842](/Users/apple/Library/Application Support/typora-user-images/image-20220227124024842.png)</p><h4 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置"><span>基础配置</span></a></h4><p>复制工程原则：保留基础结构、抹掉原始工程痕迹</p><p>![image-20220227172358109](/Users/apple/Library/Application Support/typora-user-images/image-20220227172358109.png)</p><p>maven结构下，配置文件写在resources里面</p><p>导入对应starter后，才提供对应配置属性</p><p>内置属性查询，官方文档中参考文档第一项:Application Properties</p><p>![image-20220227194818279](/Users/apple/Library/Application Support/typora-user-images/image-20220227194818279.png)</p><p>yml格式为主流格式</p><p>![image-20220227214709015](/Users/apple/Library/Application Support/typora-user-images/image-20220227214709015.png)</p><p>如果不在配置文件里面写对象属性，就要再写个xml配置</p><h4 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml"><span>yaml</span></a></h4><p>都是数据存储格式</p><p>更容易阅读，重数据轻格式</p><p>![image-20220228220644026](/Users/apple/Library/Application Support/typora-user-images/image-20220228220644026.png)</p><h5 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法：</span></a></h5><p>注意大小写、属性分行有冒号、缩进是层级【只能用空格不能用tab】、冒号后面有空格、#是注释、同样的属性名不能出现两次</p><p>多个数据是用“ - ”连接</p><h5 id="核心-数据前面要加空格和冒号隔开" tabindex="-1"><a class="header-anchor" href="#核心-数据前面要加空格和冒号隔开"><span>核心：数据前面要加空格和冒号隔开</span></a></h5><p>![image-20220228223409524](/Users/apple/Library/Application Support/typora-user-images/image-20220228223409524.png)</p><p>下面的[]是缩略格式</p><blockquote><p>深刻的教训：</p><p>这个列表序号是0开始</p></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><p>![image-20220228223628822](/Users/apple/Library/Application Support/typora-user-images/image-20220228223628822.png)</p><p>时间到时候要用再查询</p><p>![image-20220302172546036](/Users/apple/Library/Application Support/typora-user-images/image-20220302172546036.png)</p><p>引用单个数据：写一个数据就要写一个对象，麻烦</p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h2><p>通过autowired，把所有的数据都封装到一个对象</p><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span></span></a></h2><h4 id="部分封装" tabindex="-1"><a class="header-anchor" href="#部分封装"><span>部分封装</span></a></h4>',58)]))}const l=a(i,[["render",o]]),c=JSON.parse(`{"path":"/se/BackEnd/SpringBoot/%E9%85%8D%E7%BD%AE.html","title":"","lang":"en-US","frontmatter":{"description":"SpringBoot Importance: 市场占有率、重要性、java开发者写程序必备技能 基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置 目的： 简化spring应用的初始搭建、开发过程 特点： 1：创建独立的spring应用。 2：嵌入Tomcat, Jetty Undertow 而且不需要部署。 3：提供的“...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220226215552984.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220227123556529.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220227124024842.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220227172358109.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220227194818279.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220227214709015.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220228220644026.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220228223409524.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220228223628822.png\\",\\"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220302172546036.png\\"],\\"dateModified\\":\\"2023-01-08T14:46:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/BackEnd/SpringBoot/%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:description","content":"SpringBoot Importance: 市场占有率、重要性、java开发者写程序必备技能 基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置 目的： 简化spring应用的初始搭建、开发过程 特点： 1：创建独立的spring应用。 2：嵌入Tomcat, Jetty Undertow 而且不需要部署。 3：提供的“..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://aubreykuang.github.io/blog/blog/Users/apple/Library/Application Support/typora-user-images/image-20220226215552984.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-08T14:46:46.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-08T14:46:46.000Z"}]]},"git":{"createdTime":1673189206000,"updatedTime":1673189206000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":2.72,"words":817},"filePathRelative":"se/BackEnd/SpringBoot/配置.md","excerpt":"<h4>SpringBoot</h4>\\n<p>Importance: 市场占有率、重要性、java开发者写程序必备技能</p>\\n<p>基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置</p>\\n<p>目的：</p>\\n<h5>简化spring应用的初始搭建、开发过程</h5>\\n<p>特点：</p>\\n<p>1：创建独立的spring应用。 2：嵌入Tomcat, Jetty Undertow 而且不需要部署。 3：提供的“starters” poms来简化Maven配置 4：尽可能自动配置spring应用。\\n5：提供生产指标,健壮检查和外部化配置 6：没有代码生成和XML配置要求</p>","autoDesc":true}`);export{l as comp,c as data};
