import{_ as a,V as e,W as n,a1 as s}from"./framework-a2b1dd72.js";const i={},l=s(`<h1 id="索引-index" tabindex="-1"><a class="header-anchor" href="#索引-index" aria-hidden="true">#</a> 索引（index）</h1><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>帮助MySQL高效<strong>获取数据</strong>的数据结构（有序）</p><blockquote><p>如果不加索引，会从头到尾全部遍历（可能有多个）</p></blockquote><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>提高数据检索效率、降低数据库的IO成本</li><li>通过索引对数据排序，降低排序的成本、降低CPU的消耗</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>索引列占据空间</li><li>降低更新表的速度（INSERT、UPDATE、DELETE）</li></ul><h3 id="索引结构分类" tabindex="-1"><a class="header-anchor" href="#索引结构分类" aria-hidden="true">#</a> 索引结构分类</h3><h4 id="_0⃣️-二叉树索引" tabindex="-1"><a class="header-anchor" href="#_0⃣️-二叉树索引" aria-hidden="true">#</a> 0⃣️ 二叉树索引</h4><p>缺点：顺序插入时，会形成链表，查询性能大大降低</p><blockquote><p>红黑树可解决：自平衡</p></blockquote><p>数据量大时，层级深、检索速度慢</p><blockquote><p>二叉树的弊端</p></blockquote><h4 id="_0⃣️-b树-b-tree多路平衡查找树" tabindex="-1"><a class="header-anchor" href="#_0⃣️-b树-b-tree多路平衡查找树" aria-hidden="true">#</a> 0⃣️ B树（B-Tree多路平衡查找树）</h4><p>以一颗最大度数为5的b树为例</p><p>【每个节点最多存储4个key，5个指针】</p><blockquote><p>因为指针是key之间的范围，所以指针数比key多1</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230103231159538.png" alt="image-20230103231159538" loading="lazy"></p><p>满员后：</p><p>中间元素向上分裂，其余分成两边</p><h4 id="_1⃣️-b-tree索引" tabindex="-1"><a class="header-anchor" href="#_1⃣️-b-tree索引" aria-hidden="true">#</a> 1⃣️ B+ Tree索引</h4><blockquote><p>最常见、大部分引擎都支持</p><p>B树的变体</p></blockquote><p>所有的节点都会出现在叶子结点</p><p>叶子结点之间形成链表</p><blockquote><p>与经典B+树相比，MySQL增加了相邻叶子结点之间的指针</p></blockquote><p>上面的结构只是起索引的作用</p><h5 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点：</h5><ul><li>比二叉树层级少，搜索效率高</li><li>对于B树，叶子结点和非叶子结点都会保存，导致一页中存储的键值减少、指针减少，要保存大量数据，只能增加树的高度、降低性能</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104195858094.png" alt="image-20230104195858094" loading="lazy"></p><h4 id="_2⃣️-hash索引" tabindex="-1"><a class="header-anchor" href="#_2⃣️-hash索引" aria-hidden="true">#</a> 2⃣️ Hash索引</h4><p>采用hash算法，将键值换算，映射到对应的槽位上</p><blockquote><p>如果发生冲突，可以采用链表的方式解决</p></blockquote><p>特点：</p><ol><li>只有精确匹配才有效，不支持范围查询</li><li>无法用索引完成排序</li><li>效率高，通常只需要一次检索（除了冲突时）</li></ol><p>存储引擎：</p><p>Memory引擎支持hash索引，InnoDB自适应hash功能</p><h4 id="_3⃣️-r-tree空间索引" tabindex="-1"><a class="header-anchor" href="#_3⃣️-r-tree空间索引" aria-hidden="true">#</a> 3⃣️ R-tree空间索引</h4><p>MyISAM引擎的特殊索引类型，较少用（主要用于地理空间数据类型）</p><h4 id="_4⃣️-full-text全文索引" tabindex="-1"><a class="header-anchor" href="#_4⃣️-full-text全文索引" aria-hidden="true">#</a> 4⃣️ Full-text全文索引</h4><p>建立倒排索引，快速匹配文档</p><h5 id="不同索引在存储引擎中的支持情况" tabindex="-1"><a class="header-anchor" href="#不同索引在存储引擎中的支持情况" aria-hidden="true">#</a> 不同索引在存储引擎中的支持情况</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230103230543882.png" alt="image-20230103230543882" loading="lazy"></p><h3 id="索引分类" tabindex="-1"><a class="header-anchor" href="#索引分类" aria-hidden="true">#</a> 索引分类</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104181148325.png" alt="image-20230104181148325" loading="lazy"></p><p>在InnoDB中，根据索引的存储形式，分为：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104181303067.png" alt="image-20230104181303067" loading="lazy"></p><blockquote><p>二级索引又称辅助索引</p></blockquote><p><strong>聚集索引</strong>选取规则：</p><ul><li><strong>如果有主键，主键索引就是聚集索引</strong></li><li>如果没有，将会用第一个唯一索引作为聚集索引</li><li>如果都没有，InnoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><p>id的索引：聚集索引——叶子结点挂的是这一行的数据</p><p>其他字段（name）：二级索引——叶子结点挂的是主键</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104181807538.png" alt="image-20230104181807538" loading="lazy"></p><blockquote><p>下面的名称：按照字母先后比大小</p></blockquote><p>回表查询：先走二级索引，拿到主键；再走聚集索引，拿到这一行</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104182308992.png" alt="image-20230104182308992" loading="lazy"></p><h3 id="索引语法" tabindex="-1"><a class="header-anchor" href="#索引语法" aria-hidden="true">#</a> 索引语法</h3><ul><li><h5 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token operator">|</span>FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不加 <code>[]</code> ，说明创建的是常规索引</p><p><code>Index_col_name</code> 表示关联的字段</p><p>联合索引：写多个col name</p><blockquote><p>联合索引的col name顺序表示建立索引的先后，即先按照第一列排序，第一列相同则按照第二列排序</p></blockquote></li><li><h5 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引" aria-hidden="true">#</a> 查看索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><h5 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>例题：</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230104202016393.png" alt="image-20230104202016393" style="zoom:40%;">`,60),t=[l];function o(p,c){return e(),n("div",null,t)}const r=a(i,[["render",o],["__file","1.介绍.html.vue"]]);export{r as default};
