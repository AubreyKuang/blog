import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as p,o as n}from"./app-CA3Si4S1.js";const o={};function r(i,e){return n(),a("div",null,e[0]||(e[0]=[p('<h2 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历"><span>前序遍历</span></a></h2><p>根 - 左- 右</p><h2 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历"><span>中序遍历</span></a></h2><p>左 - 根 - 右</p><h2 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历"><span>后序遍历</span></a></h2><p>左 - 右 - 根</p><p>三种遍历很相像</p><p>删除树中的节点时，删除过程将按照后序遍历的顺序进行。</p><p>即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。</p><p>前序位置的代码在刚刚进入一个二叉树节点的时候执行；</p><p>后序位置的代码在将要离开一个二叉树节点的时候执行；</p><p>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。</p><h2 id="层序遍历" tabindex="-1"><a class="header-anchor" href="#层序遍历"><span>层序遍历</span></a></h2><p>一层一层地存，所以需要两层list</p>',14)]))}const h=t(o,[["render",r]]),m=JSON.parse(`{"path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/2%20%E9%81%8D%E5%8E%86.html","title":"","lang":"en-US","frontmatter":{"description":"前序遍历 根 - 左- 右 中序遍历 左 - 根 - 右 后序遍历 左 - 右 - 根 三种遍历很相像 删除树中的节点时，删除过程将按照后序遍历的顺序进行。 即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。 前序位置的代码在刚刚进入一个二叉树节点的时候执行； 后序位置的代码在将要离开一个二叉树节点的时候执行； 中序位置的代码在一个二叉树节点...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-28T14:56:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/2%20%E9%81%8D%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:description","content":"前序遍历 根 - 左- 右 中序遍历 左 - 根 - 右 后序遍历 左 - 右 - 根 三种遍历很相像 删除树中的节点时，删除过程将按照后序遍历的顺序进行。 即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。 前序位置的代码在刚刚进入一个二叉树节点的时候执行； 后序位置的代码在将要离开一个二叉树节点的时候执行； 中序位置的代码在一个二叉树节点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-28T14:56:35.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-28T14:56:35.000Z"}]]},"git":{"createdTime":1674045752000,"updatedTime":1674917795000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":3,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"algo/📓 总结/📒 二叉树/2 遍历.md","excerpt":"<h2>前序遍历</h2>\\n<p>根 - 左- 右</p>\\n<h2>中序遍历</h2>\\n<p>左 - 根 - 右</p>\\n<h2>后序遍历</h2>\\n<p>左 - 右 - 根</p>\\n<p>三种遍历很相像</p>\\n<p>删除树中的节点时，删除过程将按照后序遍历的顺序进行。</p>\\n<p>即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。</p>\\n<p>前序位置的代码在刚刚进入一个二叉树节点的时候执行；</p>\\n<p>后序位置的代码在将要离开一个二叉树节点的时候执行；</p>\\n<p>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。</p>\\n<h2>层序遍历</h2>","autoDesc":true}`);export{h as comp,m as data};
