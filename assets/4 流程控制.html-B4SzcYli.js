import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-0rC9aSp6.js";const p={};function t(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h1><h4 id="三类控制语句" tabindex="-1"><a class="header-anchor" href="#三类控制语句"><span>三类控制语句</span></a></h4><p><strong>顺序结构</strong></p><p><strong>条件判断（分支结构）</strong></p><ol><li><p>if</p><p>单分支</p></li></ol><blockquote><p>if (表达式){</p><p>}</p><p>结果是布尔值</p><p>如果表达式是true，则执行{}</p><p>每个分支独立，依次执行（所以范围要写完全，不然18就会输出一等奖、二等奖、三等奖）</p><p>{}可以不写，但是如果不写，if只负责后面的一句</p></blockquote><p>​ 多分支</p><blockquote><p>if (){}</p><p>Else if (){}</p><p>Else{}</p></blockquote><p>else的意思，和上面分支条件相反</p><p>好处：只要满足一个分支，后面的分支就不用判断；比单分支效率高</p><p>​ 双分支</p><blockquote><p>if(){}</p><p>Else{}</p></blockquote><p>双分支可以用 ? : 替换</p><p>​ 随机数</p><p>Math类中的方法 <code>Math.random() </code></p><p>返回一个double值 [0.0,1.0)</p><p><code>(int)(Math.random())*6 ------&gt; [0,5]</code></p><ol start="2"><li>switch</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">switch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.....;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.....;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  default:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;输入错误&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的是等值，可以是int，byte，short，char，String，枚举类型</p><p>如果匹配成功，就会执行冒号后面的（其他的case也会执行）</p><p>➡️所以重复的可以只写最下面那个</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220708164421795.png" alt="image-20220708164421795"></p><p>所以要加break</p><p>加个default兜底（如果不在最后写，一定要加break）</p><p>等值判断（且情况较少）的时候用switch更多</p><p>分支的嵌套使用</p><p>判断录入的数据是不是int类型</p><p><code>sc.hasNextInt()</code></p><p>返回的是boolen值</p><p><strong>循环结构</strong></p><p><em>循环四要素</em></p><p>条件初始化（初始化循环/判断变量）、条件判断、循环体、迭代</p><ol><li>while</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先判断，再执行</p><ol start="2"><li>do-while</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>和while区别，第一次不会判断，直接do</p><p>先执行，后判断；至少会执行一次</p><blockquote><p>适合的场合：</p><p>第一次一定要执行的</p><p>比如：判断考试过没过：</p><p>do考试，while通过</p></blockquote><ol start="3"><li>for</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sout</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(条件初始化</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">条件判断</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">迭代){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  循环体</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当型：while(){} for(){}</p><p>直到型：do{}while();</p><p>三种循环的效率一样</p><h4 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h4><p><strong>break</strong></p><p>停止最近的循环</p><p>如果想要停止外面的，可以使用带标签的break</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123520382.png" alt="image-20230110123520382"></p><p><strong>continue</strong></p><p>停止本次最近的循环，进行下一次循环</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123533061.png" alt="image-20230110123533061"></p><p>由于 i = 36 的时候，continue后再循环也还是36</p><p>形成死循环</p><p><strong>return</strong></p><p>结束当前的方法</p><p>和循环无关，在程序中遇到return，return所在的方法就停止</p>`,59)]))}const k=s(p,[["render",t]]),d=JSON.parse(`{"path":"/se/BackEnd/JavaSE/4%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html","title":"流程控制","lang":"en-US","frontmatter":{"description":"流程控制 三类控制语句 顺序结构 条件判断（分支结构） if 单分支 if (表达式){ } 结果是布尔值 如果表达式是true，则执行{} 每个分支独立，依次执行（所以范围要写完全，不然18就会输出一等奖、二等奖、三等奖） {}可以不写，但是如果不写，if只负责后面的一句 ​ 多分支 if (){} Else if (){} Else{} else的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流程控制\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220708164421795.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123520382.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123533061.png\\"],\\"dateModified\\":\\"2023-01-10T04:40:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/BackEnd/JavaSE/4%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"流程控制"}],["meta",{"property":"og:description","content":"流程控制 三类控制语句 顺序结构 条件判断（分支结构） if 单分支 if (表达式){ } 结果是布尔值 如果表达式是true，则执行{} 每个分支独立，依次执行（所以范围要写完全，不然18就会输出一等奖、二等奖、三等奖） {}可以不写，但是如果不写，if只负责后面的一句 ​ 多分支 if (){} Else if (){} Else{} else的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220708164421795.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-10T04:40:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-10T04:40:48.000Z"}]]},"git":{"createdTime":1673324155000,"updatedTime":1673325648000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":2,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.98,"words":593},"filePathRelative":"se/BackEnd/JavaSE/4 流程控制.md","excerpt":"\\n<h4>三类控制语句</h4>\\n<p><strong>顺序结构</strong></p>\\n<p><strong>条件判断（分支结构）</strong></p>\\n<ol>\\n<li>\\n<p>if</p>\\n<p>单分支</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>if (表达式){</p>\\n<p>}</p>\\n<p>结果是布尔值</p>\\n<p>如果表达式是true，则执行{}</p>\\n<p>每个分支独立，依次执行（所以范围要写完全，不然18就会输出一等奖、二等奖、三等奖）</p>\\n<p>{}可以不写，但是如果不写，if只负责后面的一句</p>\\n</blockquote>\\n<p>​\\t多分支</p>","autoDesc":true}`);export{k as comp,d as data};
