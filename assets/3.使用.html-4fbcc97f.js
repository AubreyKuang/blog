import{_ as e,V as a,W as r,a1 as d}from"./framework-a2b1dd72.js";const h={},o=d('<h1 id="使用规则" tabindex="-1"><a class="header-anchor" href="#使用规则" aria-hidden="true">#</a> 使用规则</h1><p>将错乱的表转化为行显示：<code>\\G</code></p><p>创建索引：<code>create idex idx_sku_sn on tb_sku(sn);</code></p><h4 id="最左前缀法则" tabindex="-1"><a class="header-anchor" href="#最左前缀法则" aria-hidden="true">#</a> 最左前缀法则</h4><p>主要针对联合索引（索引了多列）：从索引的最左列开始，并且不跳过中间的列</p><blockquote><p>最左边的一定要存在，后面的列不存在也可能走这个联合索引</p><p>如果中间的跳过了，索引会部分失效（索引长度变小）</p></blockquote><h4 id="范围查询" tabindex="-1"><a class="header-anchor" href="#范围查询" aria-hidden="true">#</a> 范围查询</h4><p>范围查询的字段的右边的列，索引失效</p><p><strong>用大于等于、小于等于</strong>，则不会</p><h4 id="几种索引失效情况" tabindex="-1"><a class="header-anchor" href="#几种索引失效情况" aria-hidden="true">#</a> 几种索引失效情况</h4><h5 id="_1⃣️-在索引列运算" tabindex="-1"><a class="header-anchor" href="#_1⃣️-在索引列运算" aria-hidden="true">#</a> 1⃣️ 在索引列运算</h5><p><code>select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;</code></p><p>对于11位的手机号、最后两位为15</p><h5 id="_2⃣️-字符串不加引号" tabindex="-1"><a class="header-anchor" href="#_2⃣️-字符串不加引号" aria-hidden="true">#</a> 2⃣️ 字符串不加引号</h5><p>字符串类型使用索引，不加引号就不会走索引</p><h4 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h4><p>头部模糊查询：可以</p><p><code>select * from tb_user where profession like &#39;信息%&#39;;</code></p><p>尾部模糊查询：失效</p><p><code>select * from tb_user where profession like &#39;%管理&#39;;</code></p><blockquote><p>前面不能加百分号</p></blockquote>',21),t=[o];function c(s,i){return a(),r("div",null,t)}const p=e(h,[["render",c],["__file","3.使用.html.vue"]]);export{p as default};
