const t=JSON.parse(`{"key":"v-313a02b0","path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20DFS/1.html","title":"基本","lang":"en-US","frontmatter":{"description":"基本 dfs解决两类问题： 遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。 不需要有撤回操作这一步 因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题 枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题 一个点可能被多次访问 要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍 所以一个节点可能在不同的组合里面出现多次，所以会被访问多次 Eg:lc39","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20DFS/1.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"基本"}],["meta",{"property":"og:description","content":"基本 dfs解决两类问题： 遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。 不需要有撤回操作这一步 因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题 枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题 一个点可能被多次访问 要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍 所以一个节点可能在不同的组合里面出现多次，所以会被访问多次 Eg:lc39"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-28T04:48:25.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-02-28T04:48:25.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20DFS/1.html"}]]},"headers":[],"git":{"createdTime":1677559705000,"updatedTime":1677559705000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":0.76,"words":229},"localizedDate":"February 28, 2023","filePathRelative":"algo/📓 总结/📒 DFS/1.md","excerpt":"<h1> 基本</h1>\\n<p>dfs解决两类问题：</p>\\n<ol>\\n<li>\\n<p>遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。</p>\\n<blockquote>\\n<p>不需要有撤回操作这一步</p>\\n<p>因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>一个点可能被多次访问</p>\\n<p>要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍</p>\\n<p>所以一个节点可能在不同的组合里面出现多次，所以会被访问多次</p>\\n<p>Eg:lc39</p>\\n</blockquote>","autoDesc":true}`);export{t as data};
