import{_ as a,V as e,W as n,a0 as s}from"./framework-91a010c2.js";const i={},d=s(`<h1 id="innodb引擎" tabindex="-1"><a class="header-anchor" href="#innodb引擎" aria-hidden="true">#</a> InnoDB引擎</h1><h2 id="_1⃣️-逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#_1⃣️-逻辑存储结构" aria-hidden="true">#</a> 1⃣️ 逻辑存储结构</h2><p><strong>表空间</strong>：ibd文件，一个mysql实例可以包含多个表空间。存储记录、索引</p><p><strong>段</strong>：数据段、索引段、回滚段</p><blockquote><p>InnoDB中索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点</p></blockquote><p><strong>区</strong>：表空间的单元结构，一个区大小为1M，默认情况下InnoDB存储引擎页大小16k，一个区中64个连续的页</p><p><strong>页</strong>：磁盘管理的最小单元。为保持连续性，每次从磁盘申请 4-5 个区</p><p><strong>行</strong>：按行存放</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109144721580.png" alt="image-20230109144721580" loading="lazy"></p><h2 id="_2⃣️-架构" tabindex="-1"><a class="header-anchor" href="#_2⃣️-架构" aria-hidden="true">#</a> 2⃣️ 架构</h2><p>InnoDB：擅长事务处理、拥有崩溃恢复等特性</p><p>内存结构 ｜后台线程｜ 磁盘结构</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109145424176.png" alt="image-20230109145424176" loading="lazy"></p><h3 id="内存架构" tabindex="-1"><a class="header-anchor" href="#内存架构" aria-hidden="true">#</a> 内存架构</h3><h4 id="_1-buffer-pool" tabindex="-1"><a class="header-anchor" href="#_1-buffer-pool" aria-hidden="true">#</a> 1 Buffer Pool</h4><p>缓冲池，缓存磁盘上经常操作的数据，<strong>增删改查</strong>先操作缓冲池（若缓冲池没有数据，从磁盘加载并缓存）</p><p>再以一定频率刷新到磁盘，减少磁盘IO，加快处理速度</p><h5 id="page" tabindex="-1"><a class="header-anchor" href="#page" aria-hidden="true">#</a> page</h5><p>缓冲池的单位，采用链表管理Page，有三种状态：</p><ul><li>free page：空闲，未被使用</li><li>clean page：被使用，数据没有被修改</li><li>dirty page：被使用、被修改，与磁盘数据不一致</li></ul><h4 id="_2-chang-buffer" tabindex="-1"><a class="header-anchor" href="#_2-chang-buffer" aria-hidden="true">#</a> 2 Chang Buffer</h4><p>更改缓冲区（针对非唯一二级索引页），执行DML时，如果这些数据没有在缓冲池中，不会直接操作磁盘，而会将数据变更存在更改缓冲区。未来数据被读取时，在讲数据合并恢复到缓冲池中，再将合并后的数据刷新到磁盘中。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109150050357.png" alt="image-20230109150050357" loading="lazy"></p><h4 id="_3-adaptive-hash-index" tabindex="-1"><a class="header-anchor" href="#_3-adaptive-hash-index" aria-hidden="true">#</a> 3 Adaptive Hash Index</h4><p>自适应哈希索引，用于优化对缓冲池数据的查询。InnoDB引擎监控表上各索引页的查询，如果观察到hash索引可以提升速度，就自动建立hash索引</p><p><code>show variables like &#39;%hash_index%&#39;;</code></p><h4 id="_4-log-buffer" tabindex="-1"><a class="header-anchor" href="#_4-log-buffer" aria-hidden="true">#</a> 4 Log Buffer</h4><p>日志缓冲区，用来保存要写入到磁盘中的日志数据，定期刷新到磁盘中</p><p>如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO</p><p><code>show variables like &#39;%log_buffer_size%&#39;;</code></p><p>日志刷新到磁盘时机<code>show variables like &#39;%flush_log_at_trx_commit%&#39;;</code>，1表示日志在每次事务提交时写入并刷新到磁盘；0表示每秒写入并刷新到磁盘一次；2表示在每次事务提交后写入，每秒刷新到磁盘一次</p><h3 id="磁盘结构" tabindex="-1"><a class="header-anchor" href="#磁盘结构" aria-hidden="true">#</a> 磁盘结构</h3><h4 id="_1-system-tablespace" tabindex="-1"><a class="header-anchor" href="#_1-system-tablespace" aria-hidden="true">#</a> 1 System Tablespace</h4><p>系统表空间，更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建，它可能也包含表和索引数据</p><p>参数：innodb_date_file_path</p><h4 id="_2-file-per-table-tablespaces" tabindex="-1"><a class="header-anchor" href="#_2-file-per-table-tablespaces" aria-hidden="true">#</a> 2 File-Per-Table Tablespaces</h4><p>每一张表自己的表空间，包含单个表的数据和索引</p><p>参数：innodb_file_per_table</p><p>默认打开</p><h4 id="_3-general-tablespaces" tabindex="-1"><a class="header-anchor" href="#_3-general-tablespaces" aria-hidden="true">#</a> 3 General Tablespaces</h4><p>通用表空间，需要通过 <code>create tablespace</code> 创建</p><p>创建：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建表空间</span>
<span class="token keyword">create</span> <span class="token keyword">tablespace</span> ts_it <span class="token keyword">add</span> datafile <span class="token string">&#39;it.ibd&#39;</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建表，使用该表空间</span>
<span class="token comment">-- 先选择数据库建立表</span>
<span class="token keyword">use</span> itcast<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> a<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">tablespace</span> ts_it<span class="token punctuation">;</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-undo-tablespaces" tabindex="-1"><a class="header-anchor" href="#_4-undo-tablespaces" aria-hidden="true">#</a> 4 Undo Tablespaces</h4><p>撤销表空间，MySQL实例初始化时自动创建两个，用于存储 undo log 日志</p><h4 id="_5-temporary-tablespaces" tabindex="-1"><a class="header-anchor" href="#_5-temporary-tablespaces" aria-hidden="true">#</a> 5 Temporary Tablespaces</h4><p>存储临时表等数据</p><h4 id="_6-doublewrite-buffer-files" tabindex="-1"><a class="header-anchor" href="#_6-doublewrite-buffer-files" aria-hidden="true">#</a> 6 Doublewrite Buffer Files</h4><p>双写缓冲区，innodb引擎将数据页从缓冲池刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据</p><p>文件后缀：<code>.dblwr</code></p><h4 id="_7-redo-log" tabindex="-1"><a class="header-anchor" href="#_7-redo-log" aria-hidden="true">#</a> 7 Redo Log</h4><p>重做日志，用来实现事务的持久性。</p><p>组成成分：重做日志缓冲（redo log buffer）；存在内存中、重做日志文件（redo log），存在磁盘中</p><p>作用：当事务提交后，会把修改信息存在该日志中，刷新脏页到磁盘中，发生错误时进行数据修复</p><p>循环方式写入重做日志文件，涉及两文件：</p><p><code>ib_logfile0</code>、<code>ib_logfile1</code></p><h3 id="后台线程" tabindex="-1"><a class="header-anchor" href="#后台线程" aria-hidden="true">#</a> 后台线程</h3><p>作用：将缓冲池中数据在合适的时候刷新到磁盘中</p><h4 id="_1-master-thread" tabindex="-1"><a class="header-anchor" href="#_1-master-thread" aria-hidden="true">#</a> 1 Master Thread</h4><p>核心，负责调度其他线程</p><p>负责将缓冲池中的数据异步刷新到磁盘中，保持数据一致性</p><p>负责脏页的刷新、合并插入缓存、undo页的回收</p><h4 id="_2-io-thread" tabindex="-1"><a class="header-anchor" href="#_2-io-thread" aria-hidden="true">#</a> 2 IO Thread</h4><p>innodb大量使用AIO处理IO请求，IO Thread负责这些IO请求的回调</p><p>分为4类：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109152639237.png" alt="image-20230109152639237" loading="lazy"></p><h4 id="_3-purge-thread" tabindex="-1"><a class="header-anchor" href="#_3-purge-thread" aria-hidden="true">#</a> 3 Purge Thread</h4><p>回收事务已经提交的 undo log</p><h4 id="_4-page-cleaner-thread" tabindex="-1"><a class="header-anchor" href="#_4-page-cleaner-thread" aria-hidden="true">#</a> 4 Page Cleaner Thread</h4><p>协助master刷新脏页到磁盘的线程，减少阻塞</p><h2 id="_3⃣️-事务原理" tabindex="-1"><a class="header-anchor" href="#_3⃣️-事务原理" aria-hidden="true">#</a> 3⃣️ 事务原理</h2><p>原子性：undo log</p><p>持久性：redo log</p><p>一致性：undo log + redo log</p><p>隔离性：锁 + MVCC</p><blockquote><p>redo log：持久性</p><p>物理日志</p><p>undo log：原子性</p><p>提供回滚、MVCC（多版本并发控制）</p><p>逻辑日志</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221323881.png" alt="image-20230109221323881" loading="lazy"></p><h2 id="_4⃣️-mvcc" tabindex="-1"><a class="header-anchor" href="#_4⃣️-mvcc" aria-hidden="true">#</a> 4⃣️ MVCC</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><h4 id="_1-当前读" tabindex="-1"><a class="header-anchor" href="#_1-当前读" aria-hidden="true">#</a> 1 当前读</h4><p>读取的是记录最新版本，加锁、其他并发事务不能修改当前记录</p><p>例子：加共享锁、update, insert, delete（排他锁）</p><h4 id="_2-快照读" tabindex="-1"><a class="header-anchor" href="#_2-快照读" aria-hidden="true">#</a> 2 快照读</h4><p>读取记录的可见版本，有可能是历史数据，不加锁、非阻塞读</p><p>例子：不加锁的select</p><p><strong>在不同隔离级别下：</strong></p><ul><li>Read committed: 每次select都生成一个快照读</li><li>Repeatable Read: 开启事务后，第一个select语句是快照读的地方</li><li>Serializable: 快照读退化为当前读</li></ul><h4 id="_3-mvcc概念" tabindex="-1"><a class="header-anchor" href="#_3-mvcc概念" aria-hidden="true">#</a> 3 MVCC概念</h4><p>Multi-Version Concurency Control 多版本并发控制</p><p>维护一个数据的多个版本，让读写操作没有冲突</p><p>具体实现依赖于数据库中三个隐式字段、undo log日志、readView</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><h4 id="_1-隐藏字段" tabindex="-1"><a class="header-anchor" href="#_1-隐藏字段" aria-hidden="true">#</a> 1 隐藏字段</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109185139464.png" alt="image-20230109185139464" loading="lazy"></p><p>查看idb文件不能直接打开，要用</p><p><code>ibd2sdi ibd文件名称.ibd</code></p><h4 id="_2-undo-log日志" tabindex="-1"><a class="header-anchor" href="#_2-undo-log日志" aria-hidden="true">#</a> 2 undo log日志</h4><p>在insert, update, delete时产生的便于数据回滚的日志</p><p>insert时，产生的undo log日志只在回滚时需要，事务提交后可被立即删除</p><p>update, delete时候，产生的日志不只是回滚需要、快照读也需要，不会被立即删除</p><p>相同或不同事务修改同一条记录——&gt; 记录的undo log生成一条记录版本的链表</p><p>链表头部时最新的旧记录、尾部是最早的旧记录</p><h4 id="_3-readview" tabindex="-1"><a class="header-anchor" href="#_3-readview" aria-hidden="true">#</a> 3 readView</h4><p>读视图，快照读SQL执行时，MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交）的id</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109214719797.png" alt="image-20230109214719797" loading="lazy"></p><blockquote><p>注意这个max_trx_id 是预分配事务ID</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215312471.png" alt="image-20230109215312471" loading="lazy"></p><h5 id="在不同的隔离级别" tabindex="-1"><a class="header-anchor" href="#在不同的隔离级别" aria-hidden="true">#</a> 在不同的隔离级别</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109215352288.png" alt="image-20230109215352288" loading="lazy"></p><p><strong>RC级别下：</strong></p><p>读已提交</p><p>在事务第一次执行快照读时生成ReadView</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109220703294.png" alt="image-20230109220703294" loading="lazy"></p><p>每次ReadView返回的数据版本：套用版本链数据访问规则</p><p><strong>RR级别下：</strong></p><p>可重复读</p><p>在第一次快照读生成ReadView，后续复用</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109221204835.png" alt="image-20230109221204835" loading="lazy"></p>`,118),r=[d];function p(o,t){return e(),n("div",null,r)}const c=a(i,[["render",p],["__file","1.html.vue"]]);export{c as default};
