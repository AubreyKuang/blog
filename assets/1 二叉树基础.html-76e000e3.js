import{_ as e,V as a,W as r,a0 as t}from"./framework-91a010c2.js";const o={},c=t('<h1 id="二叉树基础" tabindex="-1"><a class="header-anchor" href="#二叉树基础" aria-hidden="true">#</a> 二叉树基础</h1><h2 id="基本" tabindex="-1"><a class="header-anchor" href="#基本" aria-hidden="true">#</a> 基本</h2><p>树里的每一个节点：一个值和一个包含所有子节点的列表。</p><p>从图的观点来看，树也可视为一个拥有<code>N 个节点</code>和<code>N-1 条边</code>的一个有向无环图。</p><h2 id="两种思维方式" tabindex="-1"><a class="header-anchor" href="#两种思维方式" aria-hidden="true">#</a> 两种思维方式</h2><p><strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？</p><p>如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现，这叫「遍历」的思维模式。</p><p><strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？</p><p>如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。</p><p>都需要思考：</p><p><strong>如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做</strong>？</p>',11),d=[c];function n(s,h){return a(),r("div",null,d)}const i=e(o,[["render",n],["__file","1 二叉树基础.html.vue"]]);export{i as default};
