import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as p}from"./app-CA3Si4S1.js";const h={};function l(t,s){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="内存" tabindex="-1"><a class="header-anchor" href="#内存"><span>内存</span></a></h1><p>宏观层面：c语言、操作系统、计算机组成中，内存知识串讲</p><h2 id="_1⃣️计算机组成-内存条、总线、dma" tabindex="-1"><a class="header-anchor" href="#_1⃣️计算机组成-内存条、总线、dma"><span>1⃣️计算机组成：内存条、总线、DMA</span></a></h2><p>###两块芯片：</p><p>cpu芯片、南桥芯片</p><p>内存条，cpu在主办上通过总线交互；南桥接USB、网卡、声卡</p><p>###读取文件：</p><p>CPU——DMAC（控制器）——把磁盘内容读到内存中（直接访问内存）——DMAC反馈给CPU</p><p>节省cpu这一计算资源，把总线控制权也交给DMAC</p><p>#####两者不能同时使用总线</p><h2 id="_2⃣️【os】操作系统-内存管理与分类" tabindex="-1"><a class="header-anchor" href="#_2⃣️【os】操作系统-内存管理与分类"><span>2⃣️【OS】操作系统：内存管理与分类</span></a></h2><p>Mem是内存，Swap是磁盘交换分区</p><h3 id="【1】为什么要有逻辑地址" tabindex="-1"><a class="header-anchor" href="#【1】为什么要有逻辑地址"><span>【1】为什么要有逻辑地址：</span></a></h3><p>程序无法知道可用的物理地址，故必须映射。</p><p>除非是单线程的机器。</p><p>###【2】逻辑地址如何与物理地址映射：</p><p>###1.固定偏移量映射</p><p>缺陷：部分内存无法利用，内碎片；若内存被释放，影响后续程序，外碎片</p><p>###2.分页</p><p>程序逻辑内存分为多个页，物理内存分为多个帧</p><p>从页到帧的映射需要页表【存储：数字对应、是否可用、读写权限等】</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213747950.png" alt="image-20230109213747950"></p><p>磁盘换进了物理内存，不太常用的帧逐出到磁盘 故linux下这个磁盘部分叫swapping</p><p>如果对应的帧号是磁盘，则用页面置换算法，选出要逐出的页帧</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213800851.png" alt="image-20230109213800851"></p><p>###【3】分页中的时间与空间优化</p><h5 id="_1-时间优化" tabindex="-1"><a class="header-anchor" href="#_1-时间优化"><span>1.时间优化：</span></a></h5><p>将最常用的页表存到访问速度更快的硬件中（一般在MMU内存管理单元中，这个小表名为TLB[快表]）</p><p>先寻址——查TLB——miss——查PT</p><p>因为程序最常访问的页没几个，所以快表命中率很高</p><h5 id="_2-空间优化" tabindex="-1"><a class="header-anchor" href="#_2-空间优化"><span>2.空间优化：</span></a></h5><p>使用多极页表</p><p>###【4】程序内部的内存管理——分段</p><p>堆、栈：</p><p>现在说的段，常不是原本内存管理的段，而是逻辑意义的段</p><p>text 二进制 data 变量</p><p>malloc若申请&gt;128k的内存会调用mmap，在堆和栈之间区域申请内存。</p><p>是页映射磁盘（mmap是文件映射内存的系统调用）</p><p>共享内存很常见，如windows下选择文件的对话框</p><h3 id="【5】cpu缓存cache如何起作用" tabindex="-1"><a class="header-anchor" href="#【5】cpu缓存cache如何起作用"><span>【5】CPU缓存cache如何起作用</span></a></h3><h2 id="_3⃣️内存相关的系统调用" tabindex="-1"><a class="header-anchor" href="#_3⃣️内存相关的系统调用"><span>3⃣️内存相关的系统调用</span></a></h2><p>用户态切内核态的方式之一，申请内存需要用到系统调用。</p><p>（用户无法之间操控硬件，交给内核操作完了再把结果返回）</p><p>C语言：</p><p>###【1】sbrk库函数</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sbrk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(o);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* *是赋值 */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,first&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a.out</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /*返回路径*/</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1dab000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sutdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  	int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sbrk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /*把指针变为int类型*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /*int+1 四个字节+1 第五个字节。*赋值，第5678字节*/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a.out</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>堆空间中连续的内存</p><p>第一个为1，直接令5678位为123，不会报错，是因为sbrk申请的是1页（6字节），故赋值内容可以支配</p><h3 id="【2】mmap函数" tabindex="-1"><a class="header-anchor" href="#【2】mmap函数"><span>【2】mmap函数</span></a></h3><p>#####内核空间和用户空间在页表的映射相同，有时也称共享空间（不是组线那样的共享），无需内核空间中转，直接由用户空间映射，省去了内核空间到用户空间的拷贝。</p><blockquote><p>零拷贝技术还有很多，mmap不是最好的，如java-nio等技术</p></blockquote><p>#####但是没法利用对文件缓存的空间。而且缺页异常和root函数耗时未必哪个更短。</p><p>128kb以下，对应的释放内存函数为munmap</p><p>内存使用是惰性的，如果不每个赋值，则操作系统不会给。故每一页都用for循环赋值。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt; unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#inclde </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mman.h</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mmap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4096</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,PROT_READ</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PROT_WRITE,MAP_PRIVATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MAP_ANOYMOUS,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4096</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mmap还有直接将文件映射到内存的作用，也能读文件</p><p>只调用一次，直到真正读文件时才映射</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sb.st_size; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file_in_memory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一页发现在磁盘中，触发缺页错误（大错误）majflt</p><p>大错误后，文件全部加载到了物理内存，后面小错误是要把虚拟内存对应到物理内存上</p><h2 id="_4⃣️java中的内存" tabindex="-1"><a class="header-anchor" href="#_4⃣️java中的内存"><span>4⃣️JAVA中的内存</span></a></h2><p>堆、栈、本地方法栈、程序计数器、方法区、metaspace、指针压缩</p><p>栈（jvm栈）：存当前运行方法的一些局部变量，创建对象一般在栈</p><p>​ 基础对象类型，数据引用</p><p>本地方法栈：c++</p><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象：</span></a></h4><p>头（Mark Word 【8字节】，Klass Word【四字节，指针指向metaspace】，Array Lengh） +对象内容</p><p>Klass中java_mirror指针指向Class对象</p><p>java中的对象是8字节对齐的，所以可以用32bit的地址表示2^ ^2*8Byte=32GB的内存地址</p><p>所以在堆内存32G以内都是默认开启指针压缩的，每个对象的地址都用4个字节表示。但堆超过32G则无法压缩，每个对象地址必须用8字节表示。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213620452.png" alt="image-20230109213620452"></p>`,71)]))}const d=i(h,[["render",l]]),r=JSON.parse(`{"path":"/cs/components/%F0%9F%93%93%201%20%E5%86%85%E5%AD%98.html","title":"内存","lang":"en-US","frontmatter":{"description":"内存 宏观层面：c语言、操作系统、计算机组成中，内存知识串讲 1⃣️计算机组成：内存条、总线、DMA ###两块芯片： cpu芯片、南桥芯片 内存条，cpu在主办上通过总线交互；南桥接USB、网卡、声卡 ###读取文件： CPU——DMAC（控制器）——把磁盘内容读到内存中（直接访问内存）——DMAC反馈给CPU 节省cpu这一计算资源，把总线控制权也...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存\\",\\"image\\":[\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213747950.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213800851.png\\",\\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213620452.png\\"],\\"dateModified\\":\\"2023-01-10T04:45:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/components/%F0%9F%93%93%201%20%E5%86%85%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"内存"}],["meta",{"property":"og:description","content":"内存 宏观层面：c语言、操作系统、计算机组成中，内存知识串讲 1⃣️计算机组成：内存条、总线、DMA ###两块芯片： cpu芯片、南桥芯片 内存条，cpu在主办上通过总线交互；南桥接USB、网卡、声卡 ###读取文件： CPU——DMAC（控制器）——把磁盘内容读到内存中（直接访问内存）——DMAC反馈给CPU 节省cpu这一计算资源，把总线控制权也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230109213747950.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-10T04:45:49.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-10T04:45:49.000Z"}]]},"git":{"createdTime":1673324155000,"updatedTime":1673325949000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":2,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":4.27,"words":1282},"filePathRelative":"cs/components/📓 1 内存.md","excerpt":"\\n<p>宏观层面：c语言、操作系统、计算机组成中，内存知识串讲</p>\\n<h2>1⃣️计算机组成：内存条、总线、DMA</h2>\\n<p>###两块芯片：</p>\\n<p>cpu芯片、南桥芯片</p>\\n<p>内存条，cpu在主办上通过总线交互；南桥接USB、网卡、声卡</p>\\n<p>###读取文件：</p>\\n<p>CPU——DMAC（控制器）——把磁盘内容读到内存中（直接访问内存）——DMAC反馈给CPU</p>\\n<p>节省cpu这一计算资源，把总线控制权也交给DMAC</p>\\n<p>#####两者不能同时使用总线</p>\\n<h2>2⃣️【OS】操作系统：内存管理与分类</h2>\\n<p>Mem是内存，Swap是磁盘交换分区</p>","autoDesc":true}`);export{d as comp,r as data};
