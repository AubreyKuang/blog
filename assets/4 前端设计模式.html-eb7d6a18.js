import{_ as n,V as a,W as s,a0 as p}from"./framework-91a010c2.js";const t={},e=p(`<h4 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h4><p>软件设计中常见问题的解决方案模型（23种）</p><ul><li>历史经验的总结</li><li>不是具象的，与特定语言无关</li></ul><h4 id="三种类型" tabindex="-1"><a class="header-anchor" href="#三种类型" aria-hidden="true">#</a> 三种类型</h4><ul><li>创建型 - 创建对象</li><li>结构型 - 组装对象成更大的结构</li><li>行为型 - 对象间的通信、职能划分</li></ul><hr><h4 id="浏览器中api的设计模式" tabindex="-1"><a class="header-anchor" href="#浏览器中api的设计模式" aria-hidden="true">#</a> 浏览器中api的设计模式</h4><p><strong>单例模式</strong></p><p>全局唯一访问对象，在任意地方访问和修改都会反映在这个对象上。</p><p><em>应用：请求缓存、全局状态管理</em></p><p>请求缓存：发送相同的url请求，希望第二次发送请求的时候可以复用之前的一些值。</p><p><strong>发布订阅模式（观察者模式）</strong></p><p>订阅对象变化时，通知订阅者</p><p>定义一个User类， 构造器中初始状态置为离线，拥有一个followers对象数组，包括了该用户订阅的所有{用户，调用函数}。</p><p>每次在该用户上线时，遍历其followers进行通知。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727143124758.png" alt="image-20220727143124758" loading="lazy"></p><p>函数作为参数传入</p><p><em>应用：邮件订阅、上线订阅</em></p><hr><h4 id="javascript中的设计模式" tabindex="-1"><a class="header-anchor" href="#javascript中的设计模式" aria-hidden="true">#</a> JavaScript中的设计模式</h4><p>js可以提供api，从而实现的模式</p><p><strong>原型模式</strong></p><p>复制已有对象，创建新的对象</p><p>js中对象创建的基本模式</p><p><em>应用：创建上线订阅中的用户</em></p><p><strong>代理模式</strong></p><p>自定义控制对原对象的访问方式</p><p><em>应用：监控、代理工具、前端框架实现</em></p><p><strong>迭代器模式</strong></p><p>在不暴露数据类型的情况下，访问集合中的数据</p><p>用到了Symbol.iterator 该迭代器可以被 <code>for...of</code> 循环使用。</p><p><em>应用：对多种数据类型列表、树等，提供通用操作接口</em></p><hr><h4 id="前端框架中的设计模式" tabindex="-1"><a class="header-anchor" href="#前端框架中的设计模式" aria-hidden="true">#</a> 前端框架中的设计模式</h4><p><strong>代理模式</strong></p><p>前端框架对DOM的代理，通过其提供的钩子可以在更新前后进行操作.</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220727150850014.png" alt="image-20220727150850014" loading="lazy"></p><p><strong>组合模式</strong></p><p>可多个对象组合使用（组件结构），也可以单个对象独立使用</p><p><em>应用：DOM、前端组件、文件目录、部门</em></p><p>以React组件结构中国，计数器为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span><span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>button onClick <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
    count is <span class="token punctuation">{</span>count<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于中这个Count组件，渲染在App中的组合结构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
  	<span class="token operator">&lt;</span>div className <span class="token operator">=</span> <span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
  		<span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">&gt;</span>
  		<span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">&gt;</span>
  		<span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),o=[e];function c(i,l){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","4 前端设计模式.html.vue"]]);export{u as default};
