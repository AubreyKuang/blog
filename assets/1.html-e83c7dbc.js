import{_ as a,V as e,W as r,a0 as t}from"./framework-91a010c2.js";const i={},h=t('<h1 id="字符串【数组】" tabindex="-1"><a class="header-anchor" href="#字符串【数组】" aria-hidden="true">#</a> 字符串【数组】</h1><h2 id="两种操作" tabindex="-1"><a class="header-anchor" href="#两种操作" aria-hidden="true">#</a> 两种操作</h2><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><p>可以用 “==” 来比较两个字符串吗？</p><p>取决于</p><p>使用的语言是否支持<strong>运算符重载</strong>？</p><ul><li><p>yes （例如 C++、Python）：可以使用 == 来比较</p></li><li><p>no （例如 Java），无法使用 == 来比较两个字符串。当我们使用 == 时，它实际上会比较这两个对象是否是同一个对象。</p></li></ul><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h3><p>对于不同的编程语言中，字符串可能是可变的，也可能是不可变的。</p><p>不可变意味着一旦字符串被初始化，就无法改变它的内容。</p><ul><li><p>可变（如 C ++）：可以像在数组中那样修改字符串。</p></li><li><p>不可变：在其他一些语言（如 Java、Python）</p><p>不可变字符串无法被修改。哪怕你只是想修改其中的一个字符，也必须创建一个新的字符串。</p><p>在连接时首先为新字符串分配足够的空间，复制旧字符串中的内容并附加到新字符串。</p></li></ul><p>如果你确实希望字符串可变 ——&gt; 使用 toCharArray 转换为字符数组。 如果你经常必须连接字符串 ——&gt; 最好使用一些其他的数据结构，如 StringBuilder 。</p>',12),n=[h];function d(p,l){return e(),r("div",null,n)}const s=a(i,[["render",d],["__file","1.html.vue"]]);export{s as default};
