import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as o,o as a}from"./app-CA3Si4S1.js";const r={};function p(s,t){return a(),n("div",null,t[0]||(t[0]=[o('<h1 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h1><p>死锁的四个必要条件：<strong>互斥、占有且等待、不可强占用、循环等待</strong>。</p><h3 id="预防死锁" tabindex="-1"><a class="header-anchor" href="#预防死锁"><span>预防死锁</span></a></h3><p>数据库层面：</p><ul><li><p><strong>设置事务等待锁的超时时间</strong></p><p>当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 <code>innodb_lock_wait_timeout</code> 是用来设置超时时间的，默认值时 50 秒。</p></li><li><p><strong>开启主动死锁检测</strong></p><p>在发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 <code>innodb_deadlock_detect</code> 设置为 on，表示开启这个逻辑，默认就开启。</p></li></ul><h2 id="插入发生死锁" tabindex="-1"><a class="header-anchor" href="#插入发生死锁"><span>插入发生死锁</span></a></h2><p>两个事务即使生成的间隙锁的范围是一样的，也不会发生冲突，因为间隙锁目的是为了防止其他事务插入数据，因此间隙锁与间隙锁之间是相互兼容的。</p><p>在执行插入语句时，如果插入的记录在其他事务持有间隙锁范围内，插入语句就会被阻塞，因为插入语句在碰到间隙锁时，会生成一个插入意向锁，然后插入意向锁和间隙锁之间是互斥的关系。</p><p>如果两个事务分别向对方持有的间隙锁范围内插入一条记录，而插入操作为了获取到插入意向锁，<strong>都在等待对方事务的间隙锁释放</strong>，于是就造成了循环等待，满足了死锁的四个条件：<strong>互斥、占有且等待、不可强占用、循环等待</strong>，因此发生了死锁。</p><h2 id="隐式锁" tabindex="-1"><a class="header-anchor" href="#隐式锁"><span>隐式锁？</span></a></h2><p>隐式锁是 InnoDB 实现的一种<strong>延迟加锁机制</strong>，其特点是只有在<strong>可能发生冲突时才加锁</strong>，如果这个锁不可能发生冲突，就会跳过加锁环节。从而减少了锁的数量，提高了系统整体性能。</p><p>在 Insert 过程中不加锁，只有在特殊情况下，才会将隐式锁转换为显示锁。</p><ul><li>如果记录之间加有间隙锁，为了避免幻读，此时是不能插入记录的；</li><li>如果 Insert 的记录和已有记录存在唯一键冲突，此时也不能插入记录；</li></ul>',13)]))}const l=e(r,[["render",p]]),d=JSON.parse(`{"path":"/cs/database/mysql/%F0%9F%93%93%207%20%E9%94%81/2%20%E6%AD%BB%E9%94%81.html","title":"死锁","lang":"en-US","frontmatter":{"description":"死锁 死锁的四个必要条件：互斥、占有且等待、不可强占用、循环等待。 预防死锁 数据库层面： 设置事务等待锁的超时时间 当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 innodb_lock_wait_timeout 是用来设置超时时间的，默认值时 50 秒。 开启主动死锁检测...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"死锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-09T08:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/cs/database/mysql/%F0%9F%93%93%207%20%E9%94%81/2%20%E6%AD%BB%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"死锁"}],["meta",{"property":"og:description","content":"死锁 死锁的四个必要条件：互斥、占有且等待、不可强占用、循环等待。 预防死锁 数据库层面： 设置事务等待锁的超时时间 当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 innodb_lock_wait_timeout 是用来设置超时时间的，默认值时 50 秒。 开启主动死锁检测..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-09T08:02:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-09T08:02:29.000Z"}]]},"git":{"createdTime":1681027349000,"updatedTime":1681027349000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.93,"words":578},"filePathRelative":"cs/database/mysql/📓 7 锁/2 死锁.md","excerpt":"\\n<p>死锁的四个必要条件：<strong>互斥、占有且等待、不可强占用、循环等待</strong>。</p>\\n<h3>预防死锁</h3>\\n<p>数据库层面：</p>\\n<ul>\\n<li>\\n<p><strong>设置事务等待锁的超时时间</strong></p>\\n<p>当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 <code>innodb_lock_wait_timeout</code> 是用来设置超时时间的，默认值时 50 秒。</p>\\n</li>\\n<li>\\n<p><strong>开启主动死锁检测</strong></p>\\n<p>在发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 <code>innodb_deadlock_detect</code> 设置为 on，表示开启这个逻辑，默认就开启。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{l as comp,d as data};
