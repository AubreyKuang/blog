const e=JSON.parse(`{"key":"v-055f7f26","path":"/se/BackEnd/SpringBoot/2%20Spring%20IoC%20%EF%BD%9C%20AOP.html","title":"Spring IoC","lang":"en-US","frontmatter":{"description":"Spring IoC IoC（Inversion of Control:控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。 传统的开发方式 ：往往是在类 A 中手动通过 new 关键字来 new 一个 B 的对象出来 使用 IoC 思想的开发方式 ：不通过 new 关键字来创建对象，而是通过 IoC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IoC 容器里面过去即可。","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/se/BackEnd/SpringBoot/2%20Spring%20IoC%20%EF%BD%9C%20AOP.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:title","content":"Spring IoC"}],["meta",{"property":"og:description","content":"Spring IoC IoC（Inversion of Control:控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。 传统的开发方式 ：往往是在类 A 中手动通过 new 关键字来 new 一个 B 的对象出来 使用 IoC 思想的开发方式 ：不通过 new 关键字来创建对象，而是通过 IoC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IoC 容器里面过去即可。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-26T09:43:18.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-26T09:43:18.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/se/BackEnd/SpringBoot/2%20Spring%20IoC%20%EF%BD%9C%20AOP.html"}]]},"headers":[{"level":2,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":2,"title":"创建 Bean 容器","slug":"创建-bean-容器","link":"#创建-bean-容器","children":[{"level":3,"title":"单例 Bean 的线程安全问题了解吗？","slug":"单例-bean-的线程安全问题了解吗","link":"#单例-bean-的线程安全问题了解吗","children":[]},{"level":3,"title":"Bean 生命周期","slug":"bean-生命周期","link":"#bean-生命周期","children":[]}]},{"level":2,"title":"AOP","slug":"aop","link":"#aop","children":[]}],"git":{"createdTime":1682502198000,"updatedTime":1682502198000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":1}]},"readingTime":{"minutes":3.54,"words":1062},"localizedDate":"April 26, 2023","filePathRelative":"se/BackEnd/SpringBoot/2 Spring IoC ｜ AOP.md","excerpt":"<h1> Spring IoC</h1>\\n<p><strong>IoC（Inversion of Control:控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将<strong>原本在程序中手动创建对象</strong>的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。</p>\\n<ul>\\n<li><strong>传统的开发方式</strong> ：往往是在类 A 中手动通过 new 关键字来 new 一个 B 的对象出来</li>\\n<li><strong>使用 IoC 思想的开发方式</strong> ：不通过 new 关键字来创建对象，而是通过 IoC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IoC 容器里面过去即可。</li>\\n</ul>","autoDesc":true}`);export{e as data};
