const e=JSON.parse(`{"key":"v-2226f718","path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/2%20%E9%81%8D%E5%8E%86.html","title":"","lang":"en-US","frontmatter":{"description":"前序遍历 根 - 左- 右 中序遍历 左 - 根 - 右 后序遍历 左 - 右 - 根 删除树中的节点时，删除过程将按照后序遍历的顺序进行。 即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。 前序位置的代码在刚刚进入一个二叉树节点的时候执行； 后序位置的代码在将要离开一个二叉树节点的时候执行； 中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。","head":[["meta",{"property":"og:url","content":"https://korykl.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/2%20%E9%81%8D%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"Kory's Blog"}],["meta",{"property":"og:description","content":"前序遍历 根 - 左- 右 中序遍历 左 - 根 - 右 后序遍历 左 - 右 - 根 删除树中的节点时，删除过程将按照后序遍历的顺序进行。 即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。 前序位置的代码在刚刚进入一个二叉树节点的时候执行； 后序位置的代码在将要离开一个二叉树节点的时候执行； 中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-19T15:52:18.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-19T15:52:18.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://korykl.github.io/blog/blog/zh/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20%E4%BA%8C%E5%8F%89%E6%A0%91/2%20%E9%81%8D%E5%8E%86.html"}]]},"headers":[{"level":2,"title":"前序遍历","slug":"前序遍历","link":"#前序遍历","children":[]},{"level":2,"title":"中序遍历","slug":"中序遍历","link":"#中序遍历","children":[]},{"level":2,"title":"后序遍历","slug":"后序遍历","link":"#后序遍历","children":[]}],"git":{"createdTime":1674045752000,"updatedTime":1674143538000,"contributors":[{"name":"KoryKL","email":"1274994508@qq.com","commits":2}]},"readingTime":{"minutes":0.52,"words":157},"localizedDate":"January 18, 2023","filePathRelative":"algo/📓 总结/📒 二叉树/2 遍历.md","excerpt":"<h2> 前序遍历</h2>\\n<p>根 - 左- 右</p>\\n<h2> 中序遍历</h2>\\n<p>左 - 根 - 右</p>\\n<h2> 后序遍历</h2>\\n<p>左 - 右 - 根</p>\\n<p>删除树中的节点时，删除过程将按照后序遍历的顺序进行。</p>\\n<p>即为首先删除它的左节点和它的右边的节点，然后再删除节点本身。</p>\\n<p>前序位置的代码在刚刚进入一个二叉树节点的时候执行；</p>\\n<p>后序位置的代码在将要离开一个二叉树节点的时候执行；</p>\\n<p>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。</p>\\n","autoDesc":true}`);export{e as data};
