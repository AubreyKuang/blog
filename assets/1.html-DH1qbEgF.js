import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as p,o as n}from"./app-CA3Si4S1.js";const r={};function a(l,t){return n(),o("div",null,t[0]||(t[0]=[p('<h1 id="基本" tabindex="-1"><a class="header-anchor" href="#基本"><span>基本</span></a></h1><p>dfs解决两类问题：</p><ol><li><p>遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。</p><blockquote><p>不需要有撤回操作这一步</p><p>因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题</p></blockquote></li><li><p>枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题</p></li></ol><blockquote><p>一个点可能被多次访问</p><p>要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍</p><p>所以一个节点可能在不同的组合里面出现多次，所以会被访问多次</p><p>Eg:lc39</p></blockquote>',4)]))}const m=e(r,[["render",a]]),s=JSON.parse(`{"path":"/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20DFS/1.html","title":"基本","lang":"en-US","frontmatter":{"description":"基本 dfs解决两类问题： 遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。 不需要有撤回操作这一步 因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题 枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T04:48:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/algo/%F0%9F%93%93%20%E6%80%BB%E7%BB%93/%F0%9F%93%92%20DFS/1.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"基本"}],["meta",{"property":"og:description","content":"基本 dfs解决两类问题： 遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。 不需要有撤回操作这一步 因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题 枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-02-28T04:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-28T04:48:25.000Z"}]]},"git":{"createdTime":1677559705000,"updatedTime":1677559705000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"algo/📓 总结/📒 DFS/1.md","excerpt":"\\n<p>dfs解决两类问题：</p>\\n<ol>\\n<li>\\n<p>遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。</p>\\n<blockquote>\\n<p>不需要有撤回操作这一步</p>\\n<p>因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>一个点可能被多次访问</p>\\n<p>要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍</p>\\n<p>所以一个节点可能在不同的组合里面出现多次，所以会被访问多次</p>\\n<p>Eg:lc39</p>\\n</blockquote>","autoDesc":true}`);export{m as comp,s as data};
