import{_ as e,V as o,W as t,a0 as c}from"./framework-91a010c2.js";const p={},l=c('<h1 id="基本" tabindex="-1"><a class="header-anchor" href="#基本" aria-hidden="true">#</a> 基本</h1><p>dfs解决两类问题：</p><ol><li><p>遍历，即按照某一种顺序，把一种数据结构的所有元素遍历一遍（线树图都可以）。</p><blockquote><p>不需要有撤回操作这一步</p><p>因为只需要遍历一遍即可，一个节点被访问过一次，标记上以后就可以了，后面不会再被访问了，如岛屿问题</p></blockquote></li><li><p>枚举（或者叫穷举），把所有可能出现的情况都列举一遍，这时候对于一个线就可以是排列或者是组合的问题，对于图就可以是所有可能的路径组合的问题</p></li></ol><blockquote><p>一个点可能被多次访问</p><p>要考虑选上他的情况，穷举一遍，然后删掉它，不选它的情况穷举一遍</p><p>所以一个节点可能在不同的组合里面出现多次，所以会被访问多次</p><p>Eg:lc39</p></blockquote>',4),a=[l];function r(s,_){return o(),t("div",null,a)}const n=e(p,[["render",r],["__file","1.html.vue"]]);export{n as default};
