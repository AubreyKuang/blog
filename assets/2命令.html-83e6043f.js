import{_ as a,V as e,W as i,a0 as h}from"./framework-91a010c2.js";const p={},s=h('<h1 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h1><h2 id="redis数据结构" tabindex="-1"><a class="header-anchor" href="#redis数据结构" aria-hidden="true">#</a> Redis数据结构</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230111123329989.png" alt="image-20230111123329989" loading="lazy"></p><p>还可以有别的数据类型</p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><h3 id="_1-通用命令" tabindex="-1"><a class="header-anchor" href="#_1-通用命令" aria-hidden="true">#</a> 1 通用命令</h3><p>对不同数据结构都可以使用</p><p>官方文档下keys组</p><ul><li><p><code>keys</code></p><p>查看所有key，不建议在生产设备上使用</p><blockquote><p>因为redis单线程</p><p><code>keys *</code></p><p>``keys n*`</p></blockquote></li><li><p><code>del</code> + key名称</p><p>删除指定的key，可以批量操作</p><p>返回数字表示删除几个</p></li><li><p>exists</p><p>判断是否存在</p><p>返回0，1</p></li><li><p>expire</p><p>给key设置有效期，到期的时候会删除</p></li><li><p>TTL</p><p>查看剩余有效期</p></li></ul><h3 id="_2-string型" tabindex="-1"><a class="header-anchor" href="#_2-string型" aria-hidden="true">#</a> 2 String型</h3><p>按照字符串格式，分类为string（普通字符串）、int（整数，可以自增自减）、float（浮点，可以自增自减）</p><p>底层都是字节数组形式存储</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230111203953421.png" alt="image-20230111203953421" loading="lazy"></p><h4 id="key的分级存储" tabindex="-1"><a class="header-anchor" href="#key的分级存储" aria-hidden="true">#</a> key的分级存储</h4><p>允许有多个单词形成层级结构，多个单词之间用：隔开</p><p><code>项目名:业务名:类型:id</code></p><h3 id="_3-hash类型" tabindex="-1"><a class="header-anchor" href="#_3-hash类型" aria-hidden="true">#</a> 3 Hash类型</h3><p>无序字典55</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230111204931895.png" alt="image-20230111204931895" loading="lazy"></p><p>命令，如string，前面加H</p><p>但是需要告诉key后面哪个字段</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230112145538148.png" alt="image-20230112145538148" loading="lazy"></p><h3 id="_4-list类型" tabindex="-1"><a class="header-anchor" href="#_4-list类型" aria-hidden="true">#</a> 4 List类型</h3><p>类似java中的链表，是双向链表</p><p>有序、元素可以重复、插入和删除速度快、查询速度一般</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230112163928394.png" alt="image-20230112163928394" loading="lazy"></p><p><code>LPUSH users 1 2 3</code> 返回表中的values总数</p><p><code>LPOP users 1</code> 返回左边第一个元素的值</p><h4 id="存储情况" tabindex="-1"><a class="header-anchor" href="#存储情况" aria-hidden="true">#</a> 存储情况</h4><h5 id="list模拟栈" tabindex="-1"><a class="header-anchor" href="#list模拟栈" aria-hidden="true">#</a> list模拟栈</h5><p>入口和出口在同一边</p><h5 id="list模拟队列" tabindex="-1"><a class="header-anchor" href="#list模拟队列" aria-hidden="true">#</a> list模拟队列</h5><p>入口和出口在不同边</p><h5 id="list模拟阻塞队列" tabindex="-1"><a class="header-anchor" href="#list模拟阻塞队列" aria-hidden="true">#</a> list模拟阻塞队列</h5><p>入口和出口在不同边</p><p>出队时采用BLPOP或BRPOP</p><h3 id="_5-set类型" tabindex="-1"><a class="header-anchor" href="#_5-set类型" aria-hidden="true">#</a> 5 Set类型</h3><p>和HashSet类似（视为value为null）</p><p>无序、元素不可重复、查找快、支持交并差集</p><p>对单个集合的String命令</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230112181912372.png" alt="image-20230112181912372" loading="lazy"></p><p>多个集合：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230112181943540.png" alt="image-20230112181943540" loading="lazy"></p><h3 id="_6-sortedset类型" tabindex="-1"><a class="header-anchor" href="#_6-sortedset类型" aria-hidden="true">#</a> 6 SortedSet类型</h3><p>每个元素都有score值，可基于score值对元素排序</p><p>可排序、元素不重复、查询速度快</p>',46),d=[s];function t(r,n){return e(),i("div",null,d)}const l=a(p,[["render",t],["__file","2命令.html.vue"]]);export{l as default};
