import{_ as n,V as a,W as s,a0 as p}from"./framework-91a010c2.js";const e={},t=p(`<h1 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h1><h4 id="三类控制语句" tabindex="-1"><a class="header-anchor" href="#三类控制语句" aria-hidden="true">#</a> 三类控制语句</h4><p><strong>顺序结构</strong></p><p><strong>条件判断（分支结构）</strong></p><ol><li><p>if</p><p>单分支</p></li></ol><blockquote><p>if (表达式){</p><p>}</p><p>结果是布尔值</p><p>如果表达式是true，则执行{}</p><p>每个分支独立，依次执行（所以范围要写完全，不然18就会输出一等奖、二等奖、三等奖）</p><p>{}可以不写，但是如果不写，if只负责后面的一句</p></blockquote><p>​ 多分支</p><blockquote><p>if (){}</p><p>Else if (){}</p><p>Else{}</p></blockquote><p>else的意思，和上面分支条件相反</p><p>好处：只要满足一个分支，后面的分支就不用判断；比单分支效率高</p><p>​ 双分支</p><blockquote><p>if(){}</p><p>Else{}</p></blockquote><p>双分支可以用 ? : 替换</p><p>​ 随机数</p><p>Math类中的方法 <code>Math.random() </code></p><p>返回一个double值 [0.0,1.0)</p><p><code>(int)(Math.random())*6 ------&gt; [0,5]</code></p><ol start="2"><li>switch</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token operator">*</span> <span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token operator">*</span> <span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">&quot;输入错误&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的是等值，可以是int，byte，short，char，String，枚举类型</p><p>如果匹配成功，就会执行冒号后面的（其他的case也会执行）</p><p>➡️所以重复的可以只写最下面那个</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20220708164421795.png" alt="image-20220708164421795" loading="lazy"></p><p>所以要加break</p><p>加个default兜底（如果不在最后写，一定要加break）</p><p>等值判断（且情况较少）的时候用switch更多</p><p>分支的嵌套使用</p><p>判断录入的数据是不是int类型</p><p><code>sc.hasNextInt()</code></p><p>返回的是boolen值</p><p><strong>循环结构</strong></p><p><em>循环四要素</em></p><p>条件初始化（初始化循环/判断变量）、条件判断、循环体、迭代</p><ol><li>while</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先判断，再执行</p><ol start="2"><li>do-while</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和while区别，第一次不会判断，直接do</p><p>先执行，后判断；至少会执行一次</p><blockquote><p>适合的场合：</p><p>第一次一定要执行的</p><p>比如：判断考试过没过：</p><p>do考试，while通过</p></blockquote><ol start="3"><li>for</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
sout
  
<span class="token keyword">for</span><span class="token punctuation">(</span>条件初始化<span class="token punctuation">;</span>条件判断<span class="token punctuation">;</span>迭代<span class="token punctuation">)</span><span class="token punctuation">{</span>
  循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当型：while(){} for(){}</p><p>直到型：do{}while();</p><p>三种循环的效率一样</p><h4 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h4><p><strong>break</strong></p><p>停止最近的循环</p><p>如果想要停止外面的，可以使用带标签的break</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123520382.png" alt="image-20230110123520382" loading="lazy"></p><p><strong>continue</strong></p><p>停止本次最近的循环，进行下一次循环</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/image-20230110123533061.png" alt="image-20230110123533061" loading="lazy"></p><p>由于 i = 36 的时候，continue后再循环也还是36</p><p>形成死循环</p><p><strong>return</strong></p><p>结束当前的方法</p><p>和循环无关，在程序中遇到return，return所在的方法就停止</p>`,59),o=[t];function i(c,l){return a(),s("div",null,o)}const r=n(e,[["render",i],["__file","4 流程控制.html.vue"]]);export{r as default};
