import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o}from"./app-CA3Si4S1.js";const r={};function p(s,e){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h1><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p>赋予了在运行时分析类以及执行类中方法的能力。</p><p>通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p>优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p><p>不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。</p><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h3><p><strong>框架中大量使用了动态代理：动态代理的实现依赖反射。</strong></p><p><strong>注解</strong> 的实现也用到了反射：使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean ，通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？</p><p>这些都是因为可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><p>用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p><p>本质是一个继承了<code>Annotation</code> 的特殊接口</p><h3 id="解析方法" tabindex="-1"><a class="header-anchor" href="#解析方法"><span>解析方法</span></a></h3><p>被解析之后才生效：</p><p><strong>编译期直接扫描</strong> ：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</p><p><strong>运行期通过反射处理</strong> ：像框架中自带的注解(比如 Spring 框架的 <code>@Value</code> 、<code>@Component</code>)都是通过反射来进行处理的。</p><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi"><span>SPI</span></a></h2><p>Service Provider Interface ，字面意思就是：“服务提供者的接口”，专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。</p><p>将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方法。</p><h3 id="与-api-的区别" tabindex="-1"><a class="header-anchor" href="#与-api-的区别"><span><strong>与 API 的区别</strong></span></a></h3>',22)]))}const d=a(r,[["render",p]]),h=JSON.parse(`{"path":"/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/%F0%9F%8C%9F%E9%9D%A2%E8%AF%95.html","title":"面试题","lang":"en-US","frontmatter":{"description":"面试题 反射 赋予了在运行时分析类以及执行类中方法的能力。 通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。 优缺点 优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。 不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-06T03:21:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aubrey\\",\\"url\\":\\"https://github.com/aubreykuang\\"}]}"],["meta",{"property":"og:url","content":"https://aubreykuang.github.io/blog/blog/se/BackEnd/%F0%9F%8C%9F%20java%E9%9B%86%E5%90%88/1%20%E5%9F%BA%E7%A1%80/%F0%9F%8C%9F%E9%9D%A2%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Aubrey's Blog"}],["meta",{"property":"og:title","content":"面试题"}],["meta",{"property":"og:description","content":"面试题 反射 赋予了在运行时分析类以及执行类中方法的能力。 通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。 优缺点 优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。 不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-04-06T03:21:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-06T03:21:04.000Z"}]]},"git":{"createdTime":1680751264000,"updatedTime":1680751264000,"contributors":[{"name":"KoryKL","username":"KoryKL","email":"1274994508@qq.com","commits":1,"url":"https://github.com/KoryKL"}]},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"se/BackEnd/🌟 java集合/1 基础/🌟面试.md","excerpt":"\\n<h2>反射</h2>\\n<p>赋予了在运行时分析类以及执行类中方法的能力。</p>\\n<p>通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。</p>\\n<h3>优缺点</h3>\\n<p>优点：让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p>\\n<p>不过：让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。</p>\\n<h3>应用</h3>\\n<p><strong>框架中大量使用了动态代理：动态代理的实现依赖反射。</strong></p>\\n<p><strong>注解</strong> 的实现也用到了反射：使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean ，通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？</p>","autoDesc":true}`);export{d as comp,h as data};
